Microsoft (R) Macro Assembler Version 14.24.28314.0	    03/16/21 20:26:10
<Project 6 - String Primitives and Macros      (Proj6_malpay  Page 1 - 1


				TITLE Project 6 - String Primitives and Macros      (Proj6_malpayae.asm)

				; Author:	Eva Malpaya
				; Last Modified:	3/14/2021
				; OSU email address: malpayae@oregonstate.edu
				; Course number/section:   CS271 Section 401
				; Project Number:	6                Due Date:	3/14/2021
				; Description: This program prompts the user to enter numbers to be
				; entered into an array, validates the input, then displays the array.
				;
				; Note: 'array' and 'list' may be used interchangeably in my comments

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				;--------------------------------------
				; 
				; preconditions:	
				; postconditions:	
				; receives:			prompt, userInput, count, bytesRead
				; returns:			userInput, bytesRead updated
				;--------------------------------------
				;				[EBP+28], [EBP+12], [EBP+16], [EBP+8]
				mGetString MACRO mPrompt, mUserInput, mCount, mBytesRead
					; Display a prompt
					mDisplayString mPrompt

					; Get user's keyboard input into a memory location
					MOV		EDX, mUserInput
					MOV		ECX, mCount
					CALL	ReadString
					MOV		mUserInput, EDX
					MOV		mBytesRead, EAX

				ENDM


				;--------------------------------------
				; 
				; preconditions:	
				; postconditions:	
				; receives:			string (ref)
				; returns:			
				;--------------------------------------
				mDisplayString MACRO string
					PUSH	EDX
					MOV		EDX, string
					CALL	WriteString
					POP		EDX

				ENDM

				; Required constants
 = 00000020			COUNT =		32		; length of input string can accomodate
 = 0000000A			ARRAYSIZE = 10		; Number of valid integers to get from user
				;ARRAYSIZE = 1		; debug only

 00000000			.data
 00000000 50 52 4F 47 52	prog_title			BYTE	"PROGRAMMING ASSIGNMENT 6: Designing low-level I/O procedures ",13,10,0
	   41 4D 4D 49 4E
	   47 20 41 53 53
	   49 47 4E 4D 45
	   4E 54 20 36 3A
	   20 44 65 73 69
	   67 6E 69 6E 67
	   20 6C 6F 77 2D
	   6C 65 76 65 6C
	   20 49 2F 4F 20
	   70 72 6F 63 65
	   64 75 72 65 73
	   20 0D 0A 00
 00000040 57 72 69 74 74	author				BYTE	"Written by: Eva Malpaya ",13,10,0
	   65 6E 20 62 79
	   3A 20 45 76 61
	   20 4D 61 6C 70
	   61 79 61 20 0D
	   0A 00
 0000005B 2A 2A 45 43 3A	ec1					BYTE	"**EC: Program numbers user input lines & displays running subtotal. ",13,10,0	; ec = extra credit
	   20 50 72 6F 67
	   72 61 6D 20 6E
	   75 6D 62 65 72
	   73 20 75 73 65
	   72 20 69 6E 70
	   75 74 20 6C 69
	   6E 65 73 20 26
	   20 64 69 73 70
	   6C 61 79 73 20
	   72 75 6E 6E 69
	   6E 67 20 73 75
	   62 74 6F 74 61
	   6C 2E 20 0D 0A
	   00
 000000A2 2A 2A 45 43 3A	ec2					BYTE	"**EC: Program implements ReadVal and WriteVal for floating point values, using the FPU. ",13,10,0	; ec = extra credit
	   20 50 72 6F 67
	   72 61 6D 20 69
	   6D 70 6C 65 6D
	   65 6E 74 73 20
	   52 65 61 64 56
	   61 6C 20 61 6E
	   64 20 57 72 69
	   74 65 56 61 6C
	   20 66 6F 72 20
	   66 6C 6F 61 74
	   69 6E 67 20 70
	   6F 69 6E 74 20
	   76 61 6C 75 65
	   73 2C 20 75 73
	   69 6E 67 20 74
	   68 65 20 46 50
	   55 2E 20 0D 0A
	   00
 000000FD 0D 0A 50 6C 65	prompt_intro		BYTE	13,10,"Please provide 10 signed decimal integers. ",13,10
	   61 73 65 20 70
	   72 6F 76 69 64
	   65 20 31 30 20
	   73 69 67 6E 65
	   64 20 64 65 63
	   69 6D 61 6C 20
	   69 6E 74 65 67
	   65 72 73 2E 20
	   0D 0A
 0000012C  45 61 63 68 20						BYTE	"Each number needs to be small enough to fit inside a 32 bit register. ",13,10
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 62 65 20 73
	   6D 61 6C 6C 20
	   65 6E 6F 75 67
	   68 20 74 6F 20
	   66 69 74 20 69
	   6E 73 69 64 65
	   20 61 20 33 32
	   20 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 20
	   0D 0A
 00000174  41 66 74 65 72						BYTE	"After you have finished inputting the raw numbers I will display ",13,10
	   20 79 6F 75 20
	   68 61 76 65 20
	   66 69 6E 69 73
	   68 65 64 20 69
	   6E 70 75 74 74
	   69 6E 67 20 74
	   68 65 20 72 61
	   77 20 6E 75 6D
	   62 65 72 73 20
	   49 20 77 69 6C
	   6C 20 64 69 73
	   70 6C 61 79 20
	   0D 0A
 000001B7  61 20 6C 69 73						BYTE	"a list of the integers, their sum, and their average value. ",13,10,13,10,0
	   74 20 6F 66 20
	   74 68 65 20 69
	   6E 74 65 67 65
	   72 73 2C 20 74
	   68 65 69 72 20
	   73 75 6D 2C 20
	   61 6E 64 20 74
	   68 65 69 72 20
	   61 76 65 72 61
	   67 65 20 76 61
	   6C 75 65 2E 20
	   0D 0A 0D 0A 00
 000001F8 50 6C 65 61 73	prompt				BYTE	"Please enter a signed number:  ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   20 00
 00000218 45 52 52 4F 52	error				BYTE	"ERROR: You did not enter an signed number or your number was too big. ",13,10,0
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 6E 20 73 69
	   67 6E 65 64 20
	   6E 75 6D 62 65
	   72 20 6F 72 20
	   79 6F 75 72 20
	   6E 75 6D 62 65
	   72 20 77 61 73
	   20 74 6F 6F 20
	   62 69 67 2E 20
	   0D 0A 00
 00000261 50 6C 65 61 73	prompt_again		BYTE	"Please try again: ",0
	   65 20 74 72 79
	   20 61 67 61 69
	   6E 3A 20 00
 00000274 0D 0A 59 6F 75	display				BYTE	13,10,"You entered the following numbers: ",13,10,0
	   20 65 6E 74 65
	   72 65 64 20 74
	   68 65 20 66 6F
	   6C 6C 6F 77 69
	   6E 67 20 6E 75
	   6D 62 65 72 73
	   3A 20 0D 0A 00
 0000029C 54 68 65 20 73	display_sum			BYTE	"The sum of these numbers is: ",0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 00
 000002BA 54 68 65 20 72	display_avg			BYTE	"The rounded average is: ",0
	   6F 75 6E 64 65
	   64 20 61 76 65
	   72 61 67 65 20
	   69 73 3A 20 00
 000002D3 0D 0A 54 68 61	goodbye				BYTE	13,10,"Thanks for playing!  ",0
	   6E 6B 73 20 66
	   6F 72 20 70 6C
	   61 79 69 6E 67
	   21 20 20 00
 000002EB 2C 20 00		list_delim			BYTE	", ",0
 000002EE 20 00			space				BYTE	" ",0
 000002F0 4C 69 6E 65 20	line				BYTE	"Line ",0
	   00
 000002F6 3A 20 00		colon				BYTE	": ",0
 000002F9 53 75 62 74 6F	subtotal			BYTE	"Subtotal: ",0
	   74 61 6C 3A 20
	   00
 00000304  0000000A [		array				SDWORD	ARRAYSIZE DUP(?)
	    00000000
	   ]
 0000032C  0000000A [		userInput			BYTE	ARRAYSIZE DUP(33)
	    21
	   ]
 00000336 00000000		bytesRead			DWORD	0
 0000033A 00000000		numInt				SDWORD	0	; the string converted to a number
 0000033E 00000000		sum					SDWORD	0
 00000342 00000000		avg					SDWORD	0
				;;;;;;; EXTRA CREDIT 2 THINGS BELOW
 00000346 0D 0A 2E 20 2E	ec2_title		BYTE	13,10,". . . . . . . . .",13,10
	   20 2E 20 2E 20
	   2E 20 2E 20 2E
	   20 2E 20 2E 0D
	   0A
 0000035B  0D 0A 21 21 21					BYTE	13,10,"!!!BONUS ROUND!!! ",13,10
	   42 4F 4E 55 53
	   20 52 4F 55 4E
	   44 21 21 21 20
	   0D 0A
 00000371  0D 0A 2E 20 2E					BYTE	13,10,". . . . . . . . .",13,10
	   20 2E 20 2E 20
	   2E 20 2E 20 2E
	   20 2E 20 2E 0D
	   0A
 00000386  0D 0A 59 6F 75					BYTE	13,10,"You have reached the EXTRA CREDIT 2 portion of the program. ",13,10
	   20 68 61 76 65
	   20 72 65 61 63
	   68 65 64 20 74
	   68 65 20 45 58
	   54 52 41 20 43
	   52 45 44 49 54
	   20 32 20 70 6F
	   72 74 69 6F 6E
	   20 6F 66 20 74
	   68 65 20 70 72
	   6F 67 72 61 6D
	   2E 20 0D 0A
 000003C6  0D 0A 50 6C 65					BYTE	13,10,"Please provide 10 signed decimal floating point values. ",13,10
	   61 73 65 20 70
	   72 6F 76 69 64
	   65 20 31 30 20
	   73 69 67 6E 65
	   64 20 64 65 63
	   69 6D 61 6C 20
	   66 6C 6F 61 74
	   69 6E 67 20 70
	   6F 69 6E 74 20
	   76 61 6C 75 65
	   73 2E 20 0D 0A
 00000402  45 61 63 68 20					BYTE	"Each number needs to be small enough to fit inside a 32 bit register. ",13,10
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 62 65 20 73
	   6D 61 6C 6C 20
	   65 6E 6F 75 67
	   68 20 74 6F 20
	   66 69 74 20 69
	   6E 73 69 64 65
	   20 61 20 33 32
	   20 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 20
	   0D 0A
 0000044A  41 66 74 65 72					BYTE	"After you have finished inputting the raw numbers I will display ",13,10
	   20 79 6F 75 20
	   68 61 76 65 20
	   66 69 6E 69 73
	   68 65 64 20 69
	   6E 70 75 74 74
	   69 6E 67 20 74
	   68 65 20 72 61
	   77 20 6E 75 6D
	   62 65 72 73 20
	   49 20 77 69 6C
	   6C 20 64 69 73
	   70 6C 61 79 20
	   0D 0A
 0000048D  61 20 6C 69 73					BYTE	"a list of the values, their sum, and their average value. ",13,10,13,10,0
	   74 20 6F 66 20
	   74 68 65 20 76
	   61 6C 75 65 73
	   2C 20 74 68 65
	   69 72 20 73 75
	   6D 2C 20 61 6E
	   64 20 74 68 65
	   69 72 20 61 76
	   65 72 61 67 65
	   20 76 61 6C 75
	   65 2E 20 0D 0A
	   0D 0A 00

 00000000			.code
 00000000			main PROC
					; Introduce the program
 00000000  68 000000A2 R		PUSH	OFFSET ec2			;20
 00000005  68 0000005B R		PUSH	OFFSET ec1			;16
 0000000A  68 00000000 R		PUSH	OFFSET prog_title	;12
 0000000F  68 00000040 R		PUSH	OFFSET author		;8
 00000014  E8 000000C0			CALL	introduction

					; Get 10 valid integers from the user
 00000019  68 000002F9 R		PUSH	OFFSET subtotal		;60	;ec
 0000001E  68 000002F6 R		PUSH	OFFSET colon		;56
 00000023  68 000002F0 R		PUSH	OFFSET line			;52 ;ec
 00000028  68 000002EE R		PUSH	OFFSET space		;48	
 0000002D  8D 3D 0000033A R		LEA		EDI, numInt	
 00000033  57				PUSH	EDI					;44
 00000034  68 00000218 R		PUSH	OFFSET error		;40
 00000039  68 00000304 R		PUSH	OFFSET array		;36
 0000003E  68 0000032C R		PUSH	OFFSET userInput	;32
 00000043  FF 35 00000336 R		PUSH	bytesRead			;28
 00000049  6A 20			PUSH	COUNT				;24
 0000004B  6A 0A			PUSH	ARRAYSIZE			;20
 0000004D  68 000000FD R		PUSH	OFFSET prompt_intro	;16
 00000052  68 000001F8 R		PUSH	OFFSET prompt		;12
 00000057  68 00000261 R		PUSH	OFFSET prompt_again	;8
 0000005C  E8 000000A7			CALL	testProgram


					; Calculate the sum
 00000061  8D 3D 0000033E R		LEA		EDI, sum
 00000067  57				PUSH	EDI
					;PUSH	sum					;16
 00000068  68 00000304 R		PUSH	OFFSET array		;12
 0000006D  6A 0A			PUSH	ARRAYSIZE			;8
 0000006F  E8 00000334			CALL	calculateSum


					; Calculate the average
 00000074  FF 35 0000033E R		PUSH	sum					;20
 0000007A  8D 3D 00000342 R		LEA		EDI, avg
 00000080  57				PUSH	EDI
					;PUSH	avg					;16
 00000081  68 00000304 R		PUSH	OFFSET array		;12
 00000086  6A 0A			PUSH	ARRAYSIZE			;8
 00000088  E8 00000347			CALL	calculateAvg
					


					; Display the integers, their sum, and their average
					;mDisplayString display
 0000008D  68 000002EB R		PUSH	OFFSET list_delim	;36
 00000092  68 00000274 R		PUSH	OFFSET display		;32
 00000097  68 0000029C R		PUSH	OFFSET display_sum	;28
 0000009C  68 000002BA R		PUSH	OFFSET display_avg	;24
 000000A1  68 00000304 R		PUSH	OFFSET array		;20
 000000A6  6A 0A			PUSH	ARRAYSIZE			;16
 000000A8  FF 35 0000033E R		PUSH	sum					;12	
 000000AE  FF 35 00000342 R		PUSH	avg					;8
 000000B4  E8 00000379			CALL	displayResults


					; Say goodbye
 000000B9  68 000002D3 R		PUSH	OFFSET goodbye
 000000BE  E8 000003CD			CALL	farewell
 000000C3  E8 00000000 E		CALL	CrLf

				;;;;;;;;;;;;;;;;;;;;;;;;;
				;;; EXTRA CREDIT 2 PORTION BELOW
				;;;;;;;;;;;;;;;;;;;;;;;;;

						; Introduce the program
 000000C8  68 00000346 R		PUSH	OFFSET ec2_title	;8
 000000CD  E8 000003CD			CALL	ec_introduction

					; Get 10 valid integers from the user
					;LEA		EDI, numInt	
					;PUSH	EDI					;44
					;PUSH	OFFSET error		;40
					;PUSH	OFFSET array		;36
					;PUSH	OFFSET userInput	;32
					;PUSH	bytesRead			;28
					;PUSH	COUNT				;24
					;PUSH	ARRAYSIZE			;20
					;PUSH	OFFSET prompt_intro	;16
					;PUSH	OFFSET prompt		;12
					;PUSH	OFFSET prompt_again	;8
					;CALL	ec_testProgram


					; Calculate the sum
					;LEA		EDI, sum
					;PUSH	EDI					;16
					;PUSH	OFFSET array		;12
					;PUSH	ARRAYSIZE			;8
					;CALL	ec_calculateSum


					; Calculate the average
					;PUSH	sum					;20
					;LEA		EDI, avg
					;PUSH	EDI
					;PUSH	OFFSET array		;12
					;PUSH	ARRAYSIZE			;8
					;CALL	ec_calculateAvg
					


					; Display the integers, their sum, and their average
					;mDisplayString display
					;PUSH	OFFSET list_delim	;36
					;PUSH	OFFSET display		;32
					;PUSH	OFFSET display_sum	;28
					;PUSH	OFFSET display_avg	;24
					;PUSH	OFFSET array		;20
					;PUSH	ARRAYSIZE			;16
					;PUSH	sum					;12	
					;PUSH	avg					;8
					;CALL	ec_displayResults


					Invoke ExitProcess,0	; exit to operating system
 000000D2  6A 00	   *	    push   +000000000h
 000000D4  E8 00000000 E   *	    call   ExitProcess
 000000D9			main ENDP

				;--------------------------------------
				; Introduces the program title and programmer's name, introduces
				; the program itself, and displays the extra credit print statements 
				; (if necessary).
				; preconditions:	intro1, intro2 are strings
				; postconditions:	
				; receives:			intro1, intro2
				; returns:			none
				;--------------------------------------
 000000D9			introduction PROC
 000000D9  55				PUSH	EBP
 000000DA  8B EC			MOV		EBP, ESP
					; preserve registers	

					; Introduce the program title
					mDisplayString [EBP+12]
 000000DC  52		     1		PUSH	EDX
 000000DD  8B 55 0C	     1		MOV		EDX, [EBP+12]
 000000E0  E8 00000000 E     1		CALL	WriteString
 000000E5  5A		     1		POP		EDX

					; Introduce the programmer's name
					mDisplayString [EBP+8]
 000000E6  52		     1		PUSH	EDX
 000000E7  8B 55 08	     1		MOV		EDX, [EBP+8]
 000000EA  E8 00000000 E     1		CALL	WriteString
 000000EF  5A		     1		POP		EDX

					; Display the extra credit print statements 
					mDisplayString [EBP+16]
 000000F0  52		     1		PUSH	EDX
 000000F1  8B 55 10	     1		MOV		EDX, [EBP+16]
 000000F4  E8 00000000 E     1		CALL	WriteString
 000000F9  5A		     1		POP		EDX
					mDisplayString [EBP+20]
 000000FA  52		     1		PUSH	EDX
 000000FB  8B 55 14	     1		MOV		EDX, [EBP+20]
 000000FE  E8 00000000 E     1		CALL	WriteString
 00000103  5A		     1		POP		EDX

					; restore registers
 00000104  5D				POP		EBP
 00000105  C2 0010			RET		16
 00000108			introduction ENDP

				;--------------------------------------
				; 
				; (if necessary).
				; preconditions:	
				; postconditions:	
				; receives:			
				; returns:			
				;--------------------------------------
 00000108			testProgram PROC
					; Create local variables
					LOCAL	lineNumber: DWORD
					LOCAL	subTotalSum: DWORD

					; Handled by LOCAL dir
					;PUSH	EBP
					;MOV		EBP, ESP

					; preserve registers	
 00000108  55		   *	    push   ebp
 00000109  8B EC	   *	    mov    ebp, esp
 0000010B  83 C4 F8	   *	    add    esp, 0FFFFFFF8h
 0000010E  50				PUSH	EAX		
 0000010F  53				PUSH	EBX		
 00000110  51				PUSH	ECX
 00000111  52				PUSH	EDX
 00000112  56				PUSH	ESI
 00000113  57				PUSH	EDI

					; initialize local variables
 00000114  C7 45 FC			MOV		lineNumber, 1
	   00000001
 0000011B  C7 45 F8			MOV		subTotalSum, 0
	   00000000

 00000122  8B 4D 14			MOV		ECX, [EBP+20]	; array length into ECX
 00000125  8B 7D 24			MOV		EDI, [EBP+36]	; Address of array into EDI

					; Display the prompt intro
					mDisplayString [EBP+16]	;prompt_intro
 00000128  52		     1		PUSH	EDX
 00000129  8B 55 10	     1		MOV		EDX, [EBP+16]
 0000012C  E8 00000000 E     1		CALL	WriteString
 00000131  5A		     1		POP		EDX

					; Get 10 valid integers from the user.
 00000132  8B 4D 14			MOV		ECX, [EBP+20]	;ARRAYSIZE
 00000135			_fillLoop:
					;PUSH	ECX

					;PUSH	OFFSET subtotal		;60
					;PUSH	OFFSET colon		;56
					;PUSH	OFFSET line			;52
					;PUSH	OFFSET space		;48	

					;EXTRA CREDIT 1
					mDisplayString [EBP+52]		;line
 00000135  52		     1		PUSH	EDX
 00000136  8B 55 34	     1		MOV		EDX, [EBP+52]
 00000139  E8 00000000 E     1		CALL	WriteString
 0000013E  5A		     1		POP		EDX
 0000013F  FF 75 FC			PUSH	lineNumber
 00000142  E8 000001C7			CALL	WriteVal
					mDisplayString [EBP+56]		;colon
 00000147  52		     1		PUSH	EDX
 00000148  8B 55 38	     1		MOV		EDX, [EBP+56]
 0000014B  E8 00000000 E     1		CALL	WriteString
 00000150  5A		     1		POP		EDX

 00000151  FF 75 2C			PUSH	[EBP+44]		;32	;numInt
 00000154  FF 75 08			PUSH	[EBP+8]			;28	;prompt_again
 00000157  FF 75 28			PUSH	[EBP+40]		;24	;error
 0000015A  FF 75 0C			PUSH	[EBP+12]		;20	;prompt
 0000015D  FF 75 18			PUSH	[EBP+24]		;16	;COUNT
 00000160  FF 75 20			PUSH	[EBP+32]		;12	;userInput
 00000163  FF 75 1C			PUSH	[EBP+28]		;8	;bytesRead

 00000166  E8 0000003A			CALL	ReadVal

					; debug only
					;MOV		EDI, [EBP+32]
					;MOV		EAX, [EDI]
					;CALL	WriteDec
					;CALL	CrLf

					;POP		ECX

					; move the validated value into the array
					;MOV		EDI, [EBP+36]	; Address of array into EDI
 0000016B  8B 75 2C			MOV		ESI, [EBP+44]	; address of numInt into ESI
 0000016E  8B 06			MOV		EAX, [ESI]		; numInt into EAX
					;CALL	WriteInt		; debug only
 00000170  89 07			MOV		[EDI], EAX		; EAX into EDI
 00000172  83 C7 04			ADD		EDI, 4			; Move into next spot in the array

					; EXTRA CREDIT 1
 00000175  01 45 F8			ADD		subTotalSum, EAX
					mDisplayString [EBP+60]		;subtotal
 00000178  52		     1		PUSH	EDX
 00000179  8B 55 3C	     1		MOV		EDX, [EBP+60]
 0000017C  E8 00000000 E     1		CALL	WriteString
 00000181  5A		     1		POP		EDX
 00000182  FF 75 F8			PUSH	subTotalSum
 00000185  E8 00000184			CALL	WriteVal
 0000018A  E8 00000000 E		CALL	CrLf

 0000018F  B8 00000000			MOV		EAX, 0
 00000194  89 06			MOV		[ESI], EAX		; reset numInt to 0


 00000196  FF 45 FC			INC		lineNumber		; EXTRA CREDIT 1
 00000199  E2 9A			LOOP	_fillLoop
					

					; restore registers
 0000019B  5F				POP		EDI
 0000019C  5E				POP		ESI
 0000019D  5A				POP		EDX
 0000019E  59				POP		ECX
 0000019F  5B				POP		EBX		
 000001A0  58				POP		EAX
					;POP		EBP
 000001A1  C9		   *	    leave  
 000001A2  C2 0038			RET		56
 000001A5			testProgram ENDP

				;--------------------------------------
				; 
				; (if necessary).
				; preconditions:	
				; postconditions:	
				; receives:			
				; returns:			-
				;--------------------------------------
 000001A5			ReadVal PROC
					; Create local variables
					LOCAL	isValid:	DWORD	; bool for character validation
					LOCAL	isNegative:	DWORD

					; Handled by LOCAL dir
					;PUSH	EBP
					;MOV		EBP, ESP
					
					; preserve registers	
 000001A5  55		   *	    push   ebp
 000001A6  8B EC	   *	    mov    ebp, esp
 000001A8  83 C4 F8	   *	    add    esp, 0FFFFFFF8h
 000001AB  50				PUSH	EAX		
 000001AC  53				PUSH	EBX		
 000001AD  51				PUSH	ECX
 000001AE  52				PUSH	EDX
 000001AF  56				PUSH	ESI
 000001B0  57				PUSH	EDI

					; initialize local variables
 000001B1  C7 45 FC			MOV		isValid, 1
	   00000001
 000001B8  C7 45 F8			MOV		isNegative, 0
	   00000000

 000001BF			_startLoop:
					; Invoke myGetString macro to get user input in form of string of digits
					;prompt, userInput, count, bytesRead

 000001BF  8B 45 FC			MOV		EAX, isValid
 000001C2  83 F8 00			CMP		EAX, 0
 000001C5  74 02			JE		_getStringAgain
 000001C7  EB 1D			JMP		_getString



 000001C9			_getStringAgain:
					mGetString [EBP+28], [EBP+12], [EBP+16], [EBP+8]
 000001C9  52		     2		PUSH	EDX
 000001CA  8B 55 1C	     2		MOV		EDX, [EBP+28]
 000001CD  E8 00000000 E     2		CALL	WriteString
 000001D2  5A		     2		POP		EDX
 000001D3  8B 55 0C	     1		MOV		EDX, [EBP+12]
 000001D6  8B 4D 10	     1		MOV		ECX, [EBP+16]
 000001D9  E8 00000000 E     1		CALL	ReadString
 000001DE  89 55 0C	     1		MOV		[EBP+12], EDX
 000001E1  89 45 08	     1		MOV		[EBP+8], EAX
 000001E4  EB 28			JMP		_continueStartLoop
 000001E6			_getString:
					mGetString [EBP+20], [EBP+12], [EBP+16], [EBP+8]
 000001E6  52		     2		PUSH	EDX
 000001E7  8B 55 14	     2		MOV		EDX, [EBP+20]
 000001EA  E8 00000000 E     2		CALL	WriteString
 000001EF  5A		     2		POP		EDX
 000001F0  8B 55 0C	     1		MOV		EDX, [EBP+12]
 000001F3  8B 4D 10	     1		MOV		ECX, [EBP+16]
 000001F6  E8 00000000 E     1		CALL	ReadString
 000001FB  89 55 0C	     1		MOV		[EBP+12], EDX
 000001FE  89 45 08	     1		MOV		[EBP+8], EAX

					;;;;;;debug
						; Display a prompt
					;mDisplayString [EBP+20]

					; Get user's keyboard input into a memory location
					;MOV		EDX, [EBP+12]
					;MOV		ECX, [EBP+16]
					;CALL	ReadString
					;MOV		[EBP+12], EDX
					;MOV		[EBP+8], EAX
					;;;;;;end debug

					; if string is too large, automatically set as invalid
 00000201  8B 45 08			MOV		EAX, [EBP+8]
 00000204  83 F8 04			CMP		EAX, 4
 00000207  7F 1E			JG		_sizeInvalid
					; if string empty, automatically set as invalid
 00000209  83 F8 00			CMP		EAX, 0
 0000020C  74 19			JE		_sizeInvalid


 0000020E			_continueStartLoop:
					;PUSH	[isValid]				;16	
 0000020E  8D 7D FC			LEA		EDI, isValid
 00000211  57				PUSH	EDI						;16
 00000212  FF 75 08			PUSH	[EBP+8]					;12	;bytesRead
 00000215  FF 75 0C			PUSH	[EBP+12]				;8	;userInput
 00000218  E8 00000088			CALL	validate

					; if input is invalid, display error message
 0000021D  8B 45 FC			MOV		EAX, isValid
 00000220  83 F8 00			CMP		EAX, 0
 00000223  74 09			JE		_notifyInvalid

					; if this point is reached, string is valid
 00000225  EB 13			JMP		_stringIsValid

 00000227			_sizeInvalid:
 00000227  C7 45 FC			MOV		isValid, 0
	   00000000
 0000022E			_notifyInvalid:
					mDisplayString [EBP+24]			;error
 0000022E  52		     1		PUSH	EDX
 0000022F  8B 55 18	     1		MOV		EDX, [EBP+24]
 00000232  E8 00000000 E     1		CALL	WriteString
 00000237  5A		     1		POP		EDX
					;MOV		isValid, 1				;reset checker

					; reset userInput
					;PUSH	[EBP+8]					;12	;bytesRead
					;PUSH	[EBP+12]				;8	;userInput
					;CALL	resetString

 00000238  EB 85			JMP		_startLoop

 0000023A			_stringIsValid:

				; convert to SDWORD
 0000023A  8B 4D 08			MOV		ECX, [EBP+8]	; String length into ECX
					;INC		ECX			; Account for null-terminator
 0000023D  8B 75 0C			MOV		ESI, [EBP+12]	; Address of userInput into ESI

 00000240  8B 7D 20			MOV		EDI, [EBP+32]	; numInt
 00000243  B8 00000000			MOV		EAX, 0
 00000248  89 07			MOV		[EDI], EAX
					;MOV		EAX, 1
					;MOV		[EDI], EAX
					
 0000024A			_convertLoop:				; For numChar in numString
 0000024A  AC				LODSB	; Puts byte in AL

					; check if signed
					;PUSH	EAX				; preserve AL before first char check

					;MOV		EAX, ECX
					;CMP		EAX, 0
					;JE		_potentialSign
					;JMP		_isNumber


					; check first character if it's not a number
 0000024B			_potentialSign:
					;POP		EAX				; restore AL before first char check

					; check if plus sign
 0000024B  3C 2B			CMP		AL, 43			;+
 0000024D  74 1E			JE		_continueConvert

					; check if negative sign
 0000024F  3C 2D			CMP		AL, 45			;-
 00000251  74 02			JE		_isNeg
 00000253  EB 0A			JMP		_startConvert

 00000255			_isNeg:
 00000255  C7 45 F8			MOV		isNegative, 1
	   00000001
 0000025C  EB 0F			JMP		_continueConvert

					; check if characters are numbers
 0000025E			_isNumber:
 0000025E  58				POP		EAX				; restore AL before first char check

					; confirmed not trying to convert a sign character at this point1
 0000025F			_startConvert:
					; do something with AL
 0000025F  2C 30			SUB		AL, 48
 00000261  0F BE D8			MOVSX	EBX, AL

 00000264  8B 07			MOV		EAX, [EDI]		; move numInt into EAX
 00000266  6B C0 0A			IMUL	EAX, 10			; multiply numInt by 10

 00000269  03 C3			ADD		EAX, EBX		; Add these two together to update numInt
 0000026B  89 07			MOV		[EDI], EAX		; store resulting integer in numInt
 0000026D			_continueConvert:
 0000026D  E2 DB			LOOP	_convertLoop	; repeat for length of string

 0000026F  83 7D F8 01			CMP		isNegative, 1
 00000273  74 02			JE		_makeNeg
 00000275  EB 07			JMP		_endReadVal

 00000277			_makeNeg:
 00000277  8B 07			MOV		EAX, [EDI]
 00000279  6B C0 FF			IMUL	EAX, -1
 0000027C  89 07			MOV		[EDI], EAX		; store resulting integer in numInt

					;MOV		EAX, [EDI]		; mov numInt into EAX
					;MOV		ESI, [EBP+12]	; mov userInput into ESI
					;MOV		[ESI], EAX		; mov numInt into userInput? Why?

					; reset userInput
					;PUSH	[EBP+8]					;12	;bytesRead
					;PUSH	[EBP+12]				;8	;userInput
					;CALL	resetString

 0000027E			_endReadVal:	

					; restore registers
 0000027E  5F				POP		EDI
 0000027F  5E				POP		ESI
 00000280  5A				POP		EDX
 00000281  59				POP		ECX
 00000282  5B				POP		EBX		
 00000283  58				POP		EAX
					;POP		EBP					; Handled by LOCAL dir
 00000284  C9		   *	    leave  
 00000285  C2 001C			RET		28
 00000288			ReadVal ENDP

				;--------------------------------------
				; 
				; (if necessary).
				; preconditions:	
				; postconditions:	
				; receives:			aString, stringLength,
				; returns:			
				;--------------------------------------
 00000288			resetString PROC
 00000288  55				PUSH	EBP
 00000289  8B EC			MOV		EBP, ESP

					; preserve registers
 0000028B  50				PUSH	EAX		
 0000028C  53				PUSH	EBX		
 0000028D  51				PUSH	ECX
 0000028E  52				PUSH	EDX
 0000028F  56				PUSH	ESI
 00000290  57				PUSH	EDI

 00000291  B0 00			MOV		AL, 0
 00000293  8B 7D 08			MOV		EDI, [EBP+8]		; aString
 00000296  8B 4D 0C			MOV		ECX, [EBP+12]		; stringLength
 00000299  F3/ AA			REP		STOSB
				;_resetLoop:
					;STOSB						; move 0 from AL into userInpug
					;REP
					;LOOP	_resetLoop


					; restore registers
 0000029B  5F				POP		EDI
 0000029C  5E				POP		ESI
 0000029D  5A				POP		EDX
 0000029E  59				POP		ECX
 0000029F  5B				POP		EBX		
 000002A0  58				POP		EAX
 000002A1  5D				POP		EBP			; Handled by LOCAL dir
 000002A2  C2 0008			RET		8
 000002A5			resetString ENDP


				;--------------------------------------
				; 
				; (if necessary).
				; preconditions:	
				; postconditions:	
				; receives:			
				; returns:			
				;--------------------------------------
 000002A5			validate PROC
					; Create local variables
					LOCAL	index:	DWORD	; placeholder in string

					; Handled by LOCAL dir
					;PUSH	EBP
					;MOV		EBP, ESP

					; preserve registers
 000002A5  55		   *	    push   ebp
 000002A6  8B EC	   *	    mov    ebp, esp
 000002A8  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 000002AB  50				PUSH	EAX		
 000002AC  53				PUSH	EBX		
 000002AD  51				PUSH	ECX
 000002AE  52				PUSH	EDX
 000002AF  56				PUSH	ESI
 000002B0  57				PUSH	EDI

					; initialize local variables
 000002B1  C7 45 FC			MOV		index, 0
	   00000000

 000002B8  8B 4D 0C			MOV		ECX, [EBP+12]	; String length into ECX
 000002BB  41				INC		ECX				; Account for null-terminator
 000002BC  8B 75 08			MOV		ESI, [EBP+8]	; Address of string into ESI

 000002BF  8B 7D 10			MOV		EDI, [EBP+16]	; Reset bool value
 000002C2  B8 00000001			MOV		EAX, 1
 000002C7  89 07			MOV		[EDI], EAX


 000002C9			_validateLoop:	
 000002C9  AC				LODSB	; Puts byte in AL

					; check if signed
 000002CA  50				PUSH	EAX				; preserve AL before first char check

 000002CB  8B 45 FC			MOV		EAX, index
 000002CE  83 F8 00			CMP		EAX, 0
 000002D1  74 02			JE		_checkSign
 000002D3  EB 0B			JMP		_checkNumber


					; check first character if it's not a number
 000002D5			_checkSign:
 000002D5  58				POP		EAX				; restore AL before first char check

					; check if plus sign
 000002D6  3C 2B			CMP		AL, 43			;+
 000002D8  74 15			JE		_isValidChar

					; check if negative sign
 000002DA  3C 2D			CMP		AL, 45			;-
 000002DC  74 11			JE		_isValidChar
 000002DE  EB 01			JMP		_continueCheck

					; check if characters are numbers
 000002E0			_checkNumber:
 000002E0  58				POP		EAX				; restore AL before first char check

 000002E1			_continueCheck:
					; check if end of string
 000002E1  3C 00			CMP		AL, 0
 000002E3  74 1F			JE		_endOfString

 000002E5  3C 30			CMP		AL, 48			;0
 000002E7  7C 0E			JL		_invalidChar
 000002E9  3C 39			CMP		AL, 57			;9
 000002EB  7F 0A			JG		_invalidChar
 000002ED  EB 00			JMP		_isValidChar

 000002EF			_isValidChar:
 000002EF  FF 45 FC			INC		index
 000002F2  AA				STOSB
 000002F3  E2 D4			LOOP	_validateLoop
 000002F5  EB 0D			JMP		_endOfString

 000002F7			_invalidChar:
 000002F7  8B 7D 10			MOV		EDI, [EBP+16]
 000002FA  B8 00000000			MOV		EAX, 0
 000002FF  89 07			MOV		[EDI], EAX

 00000301  8B 55 10			MOV		EDX, [EBP+16]
					;CALL	WriteDec	; debug only

					;LEA		EAX, [EBP+16]
					;MOV		EAX, 0

					;MOV		EAX, [EBP+16]
					;MOV		EAX, [EDI]
					;CALL	WriteDec

 00000304			_endOfString:
					; restore registers
 00000304  5F				POP		EDI
 00000305  5E				POP		ESI
 00000306  5A				POP		EDX
 00000307  59				POP		ECX
 00000308  5B				POP		EBX		
 00000309  58				POP		EAX
					;POP		EBP			; Handled by LOCAL dir
 0000030A  C9		   *	    leave  
 0000030B  C2 000C			RET		12
 0000030E			validate ENDP


				;--------------------------------------
				; 
				;
				; preconditions:	
				; postconditions:	number (val)
				; receives:			
				; returns:			
				;--------------------------------------
 0000030E			WriteVal PROC
					; Create local variables
					LOCAL	string[33]:	BYTE	; placeholder in string
					LOCAL	reverseString[33]: BYTE	;placeholder for reversed string
					LOCAL	number: DWORD	; placeholder for number
					LOCAL	byteCounter: DWORD

					; Handled by LOCAL dir
					;PUSH	EBP
					;MOV		EBP, ESP

					; preserve registers
 0000030E  55		   *	    push   ebp
 0000030F  8B EC	   *	    mov    ebp, esp
 00000311  83 C4 B4	   *	    add    esp, 0FFFFFFB4h
 00000314  50				PUSH	EAX		
 00000315  53				PUSH	EBX		
 00000316  51				PUSH	ECX
 00000317  52				PUSH	EDX
 00000318  56				PUSH	ESI
 00000319  57				PUSH	EDI

 0000031A  C7 45 B4			MOV		byteCounter, 0
	   00000000

					; Convert numeric SDWORD value to string of ascii digits
 00000321  B8 00000000			MOV		EAX, 0
 00000326  8B 45 08			MOV		EAX, [EBP+8]	
 00000329  89 45 B8			MOV		number, EAX

					; Prep local variable to hold the converted string
					;MOV		EAX, OFFSET string
					;MOV		EDI, EAX
					;XOR		EDI, EDI
 0000032C  8D 7D DF			LEA			EDI, string


 0000032F			_startNumberConversion:
 0000032F  B9 00000063			MOV		ECX, 99
 00000334  8B 45 B8			MOV		EAX, number		; divide by 10
 00000337  83 F8 00			CMP		EAX, 0
 0000033A  7C 02			JL		_negNegative
 0000033C  EB 02			JMP		_isANumberLoop

 0000033E			_negNegative:
 0000033E  F7 D8			NEG		EAX

					; not sign character at this point
 00000340			_isANumberLoop:
 00000340  BB 0000000A			MOV		EBX, 10
 00000345  99				CDQ
 00000346  F7 FB			IDIV	EBX

					;PUSH	EAX				; save quotient for next character
 00000348  8B D8			MOV		EBX, EAX

 0000034A  8B C2			MOV		EAX, EDX
 0000034C  83 C0 30			ADD		EAX, 48			; add 48 
					;MOV		AL, AX		; add to string
 0000034F  AA				STOSB				
 00000350  FF 45 B4			INC		byteCounter
					;LEA		EDX, string			; debug only
					;CALL	WriteString			; debug only
					;POP		EAX				; restore quotient
 00000353  8B C3			MOV		EAX, EBX

 00000355  83 F8 00			CMP		EAX, 0
 00000358  74 02			JE		_noMoreLoops
 0000035A  EB 05			JMP		_continueIsANumber

 0000035C			_noMoreLoops:
 0000035C  B9 00000001			MOV		ECX, 1

 00000361			_continueIsANumber:
 00000361  E2 DD			LOOP	_isANumberLoop


					; check sign
 00000363  8B 45 B8			MOV		EAX, number
 00000366  83 F8 00			CMP		EAX, 0
 00000369  7D 02			JGE		_isPositive
 0000036B  EB 02			JMP		_isNegative

 0000036D			_isPositive:
					;MOV		AL, 43			;+
					;STOSB
					;INC		byteCounter
					;LEA		EDX, string			; debug only
					;CALL	WriteString			; debug only
 0000036D  EB 06			JMP		_addNullTerminator

 0000036F			_isNegative:
 0000036F  B0 2D			MOV		AL, 45			;-
					;LEA		EDX, string			; debug only
					;CALL	WriteString			; debug only
 00000371  AA				STOSB
 00000372  FF 45 B4			INC		byteCounter

 00000375			_addNullTerminator:
					; add null-terminator
 00000375  B0 00			MOV		AL, 0
 00000377  AA				STOSB
 00000378  FF 45 B4			INC		byteCounter

					; reverse the string
					; Adapted from StringManipulator.asm demo video (retrieved March 2021):
 0000037B  8B 4D B4			  MOV	ECX, byteCounter
 0000037E  8D 75 DF			  LEA	ESI, string
 00000381  03 F1			  ADD	ESI, ECX
 00000383  49				  DEC	ECX
 00000384  4E				  DEC	ESI
 00000385  4E				  DEC	ESI
 00000386  8D 7D BE			  LEA	EDI, reverseString

					; Reverse string
 00000389			_revLoop:
 00000389  FD				STD
 0000038A  AC				LODSB
 0000038B  FC				CLD
 0000038C  AA				STOSB
 0000038D  E2 FA			LOOP	_revLoop

					; add null-terminator
 0000038F  B0 00			MOV		AL, 0
 00000391  AA				STOSB

					; print the ascii representation
 00000392  8D 55 BE			LEA		EDX, reverseString			; debug only
					;CALL	WriteString			; debug only
					mDisplayString EDX
 00000395  52		     1		PUSH	EDX
 00000396  8B D2	     1		MOV		EDX, EDX
 00000398  E8 00000000 E     1		CALL	WriteString
 0000039D  5A		     1		POP		EDX

					; debug only
					;LEA		EDX, string			; debug only
					;CALL	WriteString			; debug only
					;mDisplayString EDX


 0000039E			_endOfWriteVal:
					; restore registers
 0000039E  5F				POP		EDI
 0000039F  5E				POP		ESI
 000003A0  5A				POP		EDX
 000003A1  59				POP		ECX
 000003A2  5B				POP		EBX		
 000003A3  58				POP		EAX
					;POP		EBP			; Handled by LOCAL dir
 000003A4  C9		   *	    leave  
 000003A5  C2 0004			RET		4
 000003A8			WriteVal ENDP


					;PUSH	sum					;16
					;PUSH	OFFSET array		;12
					;PUSH	ARRAYSIZE			;8
				;--------------------------------------
				; 
				; (if necessary).
				; preconditions:	
				; postconditions:	
				; receives:			
				; returns:			
				;--------------------------------------
 000003A8			calculateSum PROC
 000003A8  55				PUSH	EBP
 000003A9  8B EC			MOV		EBP, ESP
					; preserve registers
 000003AB  50				PUSH	EAX		
 000003AC  53				PUSH	EBX		
 000003AD  51				PUSH	ECX
 000003AE  52				PUSH	EDX
 000003AF  56				PUSH	ESI
 000003B0  57				PUSH	EDI


					; calculate
 000003B1  8B 75 0C			MOV		ESI, [EBP+12]	;array
 000003B4  8B 4D 08			MOV		ECX, [EBP+8]	;ARRAYSIZE
 000003B7  8B 7D 10			MOV		EDI, [EBP+16]
 000003BA  8B 07			MOV		EAX, [EDI]	;sum

 000003BC			_sumLoop:
 000003BC  8B 1E			MOV		EBX, [ESI]
 000003BE  03 C3			ADD		EAX, EBX			; add value in the array to sum
 000003C0  83 C6 04			ADD		ESI, TYPE SDWORD	; point to next element in the array
 000003C3  E2 F7			LOOP	_sumLoop

					;MOV		[EBP+16], EAX
					;MOV		EAX, [EBP+16]	; debug only
					;CALL	WriteInt		; debug only

 000003C5  8B 7D 10			MOV		EDI, [EBP+16]
 000003C8  89 07			MOV		[EDI], EAX

					; restore registers
 000003CA  5F				POP		EDI
 000003CB  5E				POP		ESI
 000003CC  5A				POP		EDX
 000003CD  59				POP		ECX
 000003CE  5B				POP		EBX		
 000003CF  58				POP		EAX
 000003D0  5D				POP		EBP
 000003D1  C2 000C			RET		12
 000003D4			calculateSum ENDP


					;PUSH	sum					;20
					;PUSH	avg					;16
					;PUSH	OFFSET array		;12
					;PUSH	ARRAYSIZE			;8
				;--------------------------------------
				; 
				; (if necessary).
				; preconditions:	
				; postconditions:	
				; receives:			

				; returns:			
				;--------------------------------------
 000003D4			calculateAvg PROC
 000003D4  55				PUSH	EBP
 000003D5  8B EC			MOV		EBP, ESP
					; preserve registers
 000003D7  50				PUSH	EAX		
 000003D8  53				PUSH	EBX		
 000003D9  51				PUSH	ECX
 000003DA  52				PUSH	EDX
 000003DB  56				PUSH	ESI
 000003DC  57				PUSH	EDI


					; calculate the average
 000003DD  8B 45 14			MOV		EAX, [EBP+20]
 000003E0  8B 5D 08			MOV		EBX, [EBP+8]
 000003E3  99				CDQ
 000003E4  F7 FB			IDIV	EBX

					; if the average is negative, round down instead.
					; Used the below link as reference for rounding 
					; negatives to 'floor' (Retrieved March 2021):
					; https://www.calculator.net/rounding-calculator.html?cnum=-321.9&cpre=0&cpren=2&cmode=nearest&sp=0&x=0&y=0
 000003E6  83 F8 00			CMP		EAX, 0
 000003E9  7C 02			JL		_roundDown
 000003EB  EB 01			JMP		_storeAverage

 000003ED			_roundDown:
 000003ED  48				DEC		EAX

 000003EE			_storeAverage:
 000003EE  8B 7D 10			MOV		EDI, [EBP+16]
 000003F1  89 07			MOV		[EDI], EAX

					; restore registers
 000003F3  5F				POP		EDI
 000003F4  5E				POP		ESI
 000003F5  5A				POP		EDX
 000003F6  59				POP		ECX
 000003F7  5B				POP		EBX		
 000003F8  58				POP		EAX
 000003F9  5D				POP		EBP
 000003FA  C2 0010			RET 16
 000003FD			calculateAvg ENDP

				;--------------------------------------
				; Traverses an array and prints out its values with a space
				; in-between each number.
				;
				; preconditions:	someArray is a DWORD array the size of ARRAYSIZE,
				;					ARRAYSIZE is the size of the array,
				;					someTitle contains a string
				; postconditions:	EAX, EBX, ECX, EDX changed but restored
				; receives:			someTitle, someArray, ARRAYSIZE 
				; returns:			none; output to terminal only
				;--------------------------------------
 000003FD			printArray PROC
 000003FD  55				PUSH	EBP
 000003FE  8B EC			MOV		EBP, ESP

					; preserve registers
 00000400  50				PUSH	EAX		
 00000401  53				PUSH	EBX		
 00000402  51				PUSH	ECX
 00000403  52				PUSH	EDX
 00000404  56				PUSH	ESI
 00000405  57				PUSH	EDI

					; Access the list
 00000406  8B 4D 08			MOV		ECX, [EBP+8]	; List length into ECX
 00000409  8B 75 0C			MOV		ESI, [EBP+12]	; Address of list into EDI


					; traverse the list and print each number
					; with a space in-between. Prints new line
					; every 20 numbers
 0000040C			_displayLoop:
 0000040C  8B 06			MOV		EAX, [ESI]		; Print out a number in the list
					;CALL	WriteInt		; debug only
 0000040E  50				PUSH	EAX				;8
					;CALL	WriteInt		; debug only
 0000040F  E8 FFFFFEFA			CALL	WriteVal

 00000414  83 F9 01			CMP		ECX, 1
 00000417  74 0A			JE		_noDelim
					mDisplayString [EBP+16]		; print out delim character
 00000419  52		     1		PUSH	EDX
 0000041A  8B 55 10	     1		MOV		EDX, [EBP+16]
 0000041D  E8 00000000 E     1		CALL	WriteString
 00000422  5A		     1		POP		EDX


 00000423			_noDelim:
 00000423  83 C6 04			ADD		ESI, 4			; Move to the next element in list
 00000426  E2 E4			LOOP	_displayLoop

					


					; restore registers
 00000428  5F				POP		EDI
 00000429  5E				POP		ESI
 0000042A  5A				POP		EDX
 0000042B  59				POP		ECX
 0000042C  5B				POP		EBX		
 0000042D  58				POP		EAX
 0000042E  5D				POP		EBP			
 0000042F  C2 000C			RET		12
 00000432			printArray ENDP


					;PUSH	OFFSET list_delim	;36
					;PUSH	OFFSET display		;32
					;PUSH	OFFSET display_sum	;28
					;PUSH	OFFSET display_avg	;24
					;PUSH	OFFSET array		;20
					;PUSH	ARRAYSIZE			;16
					;PUSH	sum					;12	
					;PUSH	avg					;8
				;--------------------------------------
				; 
				; (if necessary).
				; preconditions:	
				; postconditions:	
				; receives:			
				; returns:			
				;--------------------------------------
 00000432			displayResults PROC
 00000432  55				PUSH	EBP
 00000433  8B EC			MOV		EBP, ESP
					; preserve registers	
 00000435  50				PUSH	EAX		
 00000436  53				PUSH	EBX		
 00000437  51				PUSH	ECX
 00000438  52				PUSH	EDX
 00000439  56				PUSH	ESI
 0000043A  57				PUSH	EDI

					; Display the integers
					mDisplayString [EBP+32]
 0000043B  52		     1		PUSH	EDX
 0000043C  8B 55 20	     1		MOV		EDX, [EBP+32]
 0000043F  E8 00000000 E     1		CALL	WriteString
 00000444  5A		     1		POP		EDX
 00000445  FF 75 24			PUSH	[EBP+36]	;16	;list_delim
 00000448  FF 75 14			PUSH	[EBP+20]	;12	;array
 0000044B  FF 75 10			PUSH	[EBP+16]	;8	;ARRAYSIZE
 0000044E  E8 FFFFFFAA			CALL	printArray
 00000453  E8 00000000 E		CALL	CrLf			; Was told can use this per Piazza question @446 discussion thread


					; Display the sum
					mDisplayString [EBP+28]
 00000458  52		     1		PUSH	EDX
 00000459  8B 55 1C	     1		MOV		EDX, [EBP+28]
 0000045C  E8 00000000 E     1		CALL	WriteString
 00000461  5A		     1		POP		EDX
 00000462  FF 75 0C			PUSH	[EBP+12]	;8	;sum
 00000465  E8 FFFFFEA4			CALL	WriteVal
 0000046A  E8 00000000 E		CALL	CrLf			; Was told can use this per Piazza question @446 discussion thread

					; Display the average
					mDisplayString [EBP+24]
 0000046F  52		     1		PUSH	EDX
 00000470  8B 55 18	     1		MOV		EDX, [EBP+24]
 00000473  E8 00000000 E     1		CALL	WriteString
 00000478  5A		     1		POP		EDX
 00000479  FF 75 08			PUSH	[EBP+8]		;8	;sum
 0000047C  E8 FFFFFE8D			CALL	WriteVal
 00000481  E8 00000000 E		CALL	CrLf			; Was told can use this per Piazza question @446 discussion thread

					; restore registers
 00000486  5F				POP		EDI
 00000487  5E				POP		ESI
 00000488  5A				POP		EDX
 00000489  59				POP		ECX
 0000048A  5B				POP		EBX		
 0000048B  58				POP		EAX
 0000048C  5D				POP		EBP
 0000048D  C2 0020			RET		32
 00000490			displayResults ENDP

				;--------------------------------------
				; Displays a parting message
				;
				; preconditions:	goodbye is a string that contains a farewell message
				; postconditions:	EDX changed changed but restored
				; receives:			goodbye
				; returns:			none; prints to terminal only
				;--------------------------------------
 00000490			farewell PROC
 00000490  55				PUSH	EBP
 00000491  8B EC			MOV		EBP, ESP
					; preserve registers
 00000493  52				PUSH	EDX

 00000494  8B 55 08			MOV		EDX, [EBP+8]
 00000497  E8 00000000 E		CALL	WriteString

					; restore registers
 0000049C  5A				POP		EDX
 0000049D  5D				POP		EBP
 0000049E  C3				RET
 0000049F			farewell ENDP

				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				;;; EXTRA CREDIT 2 PORTION BELOW
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				;--------------------------------------
				; Introduces the program title and programmer's name, introduces
				; the program itself, and displays the extra credit print statements 
				; (if necessary).
				; preconditions:	intro1, intro2 are strings
				; postconditions:	
				; receives:			intro1, intro2
				; returns:			none
				;--------------------------------------
 0000049F			ec_introduction PROC
 0000049F  55				PUSH	EBP
 000004A0  8B EC			MOV		EBP, ESP
					; preserve registers	

					; Introduce the new part of the program
					mDisplayString [EBP+8]
 000004A2  52		     1		PUSH	EDX
 000004A3  8B 55 08	     1		MOV		EDX, [EBP+8]
 000004A6  E8 00000000 E     1		CALL	WriteString
 000004AB  5A		     1		POP		EDX

					; restore registers
 000004AC  5D				POP		EBP
 000004AD  C2 0004			RET		4
 000004B0			ec_introduction ENDP


				END main
Microsoft (R) Macro Assembler Version 14.24.28314.0	    03/16/21 20:26:10
<Project 6 - String Primitives and Macros      (Proj6_malpay  Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000004CC Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000004B0 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 000001A5 _TEXT	Length= 000000E3 Public STDCALL
  isValid  . . . . . . . . . . .	DWord	 bp - 00000004
  isNegative . . . . . . . . . .	DWord	 bp - 00000008
  _startLoop . . . . . . . . . .	L Near	 000001BF _TEXT	
  _getStringAgain  . . . . . . .	L Near	 000001C9 _TEXT	
  _getString . . . . . . . . . .	L Near	 000001E6 _TEXT	
  _continueStartLoop . . . . . .	L Near	 0000020E _TEXT	
  _sizeInvalid . . . . . . . . .	L Near	 00000227 _TEXT	
  _notifyInvalid . . . . . . . .	L Near	 0000022E _TEXT	
  _stringIsValid . . . . . . . .	L Near	 0000023A _TEXT	
  _convertLoop . . . . . . . . .	L Near	 0000024A _TEXT	
  _potentialSign . . . . . . . .	L Near	 0000024B _TEXT	
  _isNeg . . . . . . . . . . . .	L Near	 00000255 _TEXT	
  _isNumber  . . . . . . . . . .	L Near	 0000025E _TEXT	
  _startConvert  . . . . . . . .	L Near	 0000025F _TEXT	
  _continueConvert . . . . . . .	L Near	 0000026D _TEXT	
  _makeNeg . . . . . . . . . . .	L Near	 00000277 _TEXT	
  _endReadVal  . . . . . . . . .	L Near	 0000027E _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 0000030E _TEXT	Length= 0000009A Public STDCALL
  string . . . . . . . . . . . .	Byte	 bp - 00000021
  reverseString  . . . . . . . .	Byte	 bp - 00000042
  number . . . . . . . . . . . .	DWord	 bp - 00000048
  byteCounter  . . . . . . . . .	DWord	 bp - 0000004C
  _startNumberConversion . . . .	L Near	 0000032F _TEXT	
  _negNegative . . . . . . . . .	L Near	 0000033E _TEXT	
  _isANumberLoop . . . . . . . .	L Near	 00000340 _TEXT	
  _noMoreLoops . . . . . . . . .	L Near	 0000035C _TEXT	
  _continueIsANumber . . . . . .	L Near	 00000361 _TEXT	
  _isPositive  . . . . . . . . .	L Near	 0000036D _TEXT	
  _isNegative  . . . . . . . . .	L Near	 0000036F _TEXT	
  _addNullTerminator . . . . . .	L Near	 00000375 _TEXT	
  _revLoop . . . . . . . . . . .	L Near	 00000389 _TEXT	
  _endOfWriteVal . . . . . . . .	L Near	 0000039E _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
calculateAvg . . . . . . . . . .	P Near	 000003D4 _TEXT	Length= 00000029 Public STDCALL
  _roundDown . . . . . . . . . .	L Near	 000003ED _TEXT	
  _storeAverage  . . . . . . . .	L Near	 000003EE _TEXT	
calculateSum . . . . . . . . . .	P Near	 000003A8 _TEXT	Length= 0000002C Public STDCALL
  _sumLoop . . . . . . . . . . .	L Near	 000003BC _TEXT	
displayResults . . . . . . . . .	P Near	 00000432 _TEXT	Length= 0000005E Public STDCALL
ec_introduction  . . . . . . . .	P Near	 0000049F _TEXT	Length= 00000011 Public STDCALL
farewell . . . . . . . . . . . .	P Near	 00000490 _TEXT	Length= 0000000F Public STDCALL
introduction . . . . . . . . . .	P Near	 000000D9 _TEXT	Length= 0000002F Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000D9 Public STDCALL
printArray . . . . . . . . . . .	P Near	 000003FD _TEXT	Length= 00000035 Public STDCALL
  _displayLoop . . . . . . . . .	L Near	 0000040C _TEXT	
  _noDelim . . . . . . . . . . .	L Near	 00000423 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
resetString  . . . . . . . . . .	P Near	 00000288 _TEXT	Length= 0000001D Public STDCALL
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
testProgram  . . . . . . . . . .	P Near	 00000108 _TEXT	Length= 0000009D Public STDCALL
  lineNumber . . . . . . . . . .	DWord	 bp - 00000004
  subTotalSum  . . . . . . . . .	DWord	 bp - 00000008
  _fillLoop  . . . . . . . . . .	L Near	 00000135 _TEXT	
validate . . . . . . . . . . . .	P Near	 000002A5 _TEXT	Length= 00000069 Public STDCALL
  index  . . . . . . . . . . . .	DWord	 bp - 00000004
  _validateLoop  . . . . . . . .	L Near	 000002C9 _TEXT	
  _checkSign . . . . . . . . . .	L Near	 000002D5 _TEXT	
  _checkNumber . . . . . . . . .	L Near	 000002E0 _TEXT	
  _continueCheck . . . . . . . .	L Near	 000002E1 _TEXT	
  _isValidChar . . . . . . . . .	L Near	 000002EF _TEXT	
  _invalidChar . . . . . . . . .	L Near	 000002F7 _TEXT	
  _endOfString . . . . . . . . .	L Near	 00000304 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 0000000Ah   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
COUNT  . . . . . . . . . . . . .	Number	 00000020h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
array  . . . . . . . . . . . . .	DWord	 00000304 _DATA	
author . . . . . . . . . . . . .	Byte	 00000040 _DATA	
avg  . . . . . . . . . . . . . .	DWord	 00000342 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
bytesRead  . . . . . . . . . . .	DWord	 00000336 _DATA	
colon  . . . . . . . . . . . . .	Byte	 000002F6 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
display_avg  . . . . . . . . . .	Byte	 000002BA _DATA	
display_sum  . . . . . . . . . .	Byte	 0000029C _DATA	
display  . . . . . . . . . . . .	Byte	 00000274 _DATA	
ec1  . . . . . . . . . . . . . .	Byte	 0000005B _DATA	
ec2_title  . . . . . . . . . . .	Byte	 00000346 _DATA	
ec2  . . . . . . . . . . . . . .	Byte	 000000A2 _DATA	
error  . . . . . . . . . . . . .	Byte	 00000218 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 000002D3 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
line . . . . . . . . . . . . . .	Byte	 000002F0 _DATA	
list_delim . . . . . . . . . . .	Byte	 000002EB _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
numInt . . . . . . . . . . . . .	DWord	 0000033A _DATA	
prog_title . . . . . . . . . . .	Byte	 00000000 _DATA	
prompt_again . . . . . . . . . .	Byte	 00000261 _DATA	
prompt_intro . . . . . . . . . .	Byte	 000000FD _DATA	
prompt . . . . . . . . . . . . .	Byte	 000001F8 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
space  . . . . . . . . . . . . .	Byte	 000002EE _DATA	
subtotal . . . . . . . . . . . .	Byte	 000002F9 _DATA	
sum  . . . . . . . . . . . . . .	DWord	 0000033E _DATA	
userInput  . . . . . . . . . . .	Byte	 0000032C _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
