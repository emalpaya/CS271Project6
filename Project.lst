Microsoft (R) Macro Assembler Version 14.24.28314.0	    03/16/21 22:59:30
<Project 6 - String Primitives and Macros      (Proj6_malpay  Page 1 - 1


				TITLE Project 6 - String Primitives and Macros      (Proj6_malpayae.asm)

				; Author:	Eva Malpaya
				; Last Modified:	3/16/2021
				; OSU email address: malpayae@oregonstate.edu
				; Course number/section:   CS271 Section 401
				; Project Number:	6                Due Date:	3/14/2021
				; Description: This program gets 10 valid integers from the user,
				; stores them in an array, then displays them, their sum, and their
				; average.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				;--------------------------------------------------------------
				; Name:	mGetString
				;
				; Displays a prompt, then places user's keyboard input into a memory
				; location.
				;
				; Preconditions: mPrompt is address of a null-terminated string, 
				; mUserInput is address of a string one size bigger than mCount, 
				; mBytesRead is a DWORD
				;
				; Receives:
				; mPrompt		= prompt address
				; mUserInput	= input buffer
				; mCount		= max size user can enter
				; mBytesRead	= characters entered by user
				;
				; Returns:		mUserInput and mBytesRead udpated
				;--------------------------------------------------------------
				mGetString MACRO mPrompt, mUserInput, mCount, mBytesRead

					; preserve registers
					PUSH	EDX
					PUSH	ECX

					; Display a prompt
					mDisplayString mPrompt

					; Get user's keyboard input into a memory location
					MOV		EDX, mUserInput
					MOV		ECX, mCount
					CALL	ReadString
					MOV		mUserInput, EDX
					MOV		mBytesRead, EAX

					; restore registers
					POP		ECX
					POP		EDX

				ENDM


				;--------------------------------------------------------------
				; Name:	mDisplayString
				;
				; Prints the string store in the specified memory location.
				;
				; Preconditions: mString is a null-terminated string
				;
				; Receives:
				; mString		= string to print
				;
				; Returns:		none; output to terminal only
				;--------------------------------------------------------------
				mDisplayString MACRO mString

					; preserve registers
					PUSH	EDX

					MOV		EDX, mString
					CALL	WriteString

					; restore registers
					POP		EDX

				ENDM

				;--------------------------------------------------------------
				; Constants
				;
				;
				;--------------------------------------------------------------

 = 00000020			COUNT =		32		; length user input string can accomodate
 = 0000000A			ARRAYSIZE = 10		; Number of valid numbers to get from the user


 00000000			.data
 00000000 50 52 4F 47 52	prog_title			BYTE	"PROGRAMMING ASSIGNMENT 6: Designing low-level I/O procedures ",13,10,0
	   41 4D 4D 49 4E
	   47 20 41 53 53
	   49 47 4E 4D 45
	   4E 54 20 36 3A
	   20 44 65 73 69
	   67 6E 69 6E 67
	   20 6C 6F 77 2D
	   6C 65 76 65 6C
	   20 49 2F 4F 20
	   70 72 6F 63 65
	   64 75 72 65 73
	   20 0D 0A 00
 00000040 57 72 69 74 74	author				BYTE	"Written by: Eva Malpaya ",13,10,0
	   65 6E 20 62 79
	   3A 20 45 76 61
	   20 4D 61 6C 70
	   61 79 61 20 0D
	   0A 00
 0000005B 2A 2A 45 43 3A	ec_1				BYTE	"**EC: Program numbers user input lines & displays running subtotal.",13,10,0	; ec = extra credit
	   20 50 72 6F 67
	   72 61 6D 20 6E
	   75 6D 62 65 72
	   73 20 75 73 65
	   72 20 69 6E 70
	   75 74 20 6C 69
	   6E 65 73 20 26
	   20 64 69 73 70
	   6C 61 79 73 20
	   72 75 6E 6E 69
	   6E 67 20 73 75
	   62 74 6F 74 61
	   6C 2E 0D 0A 00
 000000A1 0D 0A 50 6C 65	prompt_intro		BYTE	13,10,"Please provide 10 signed decimal integers. ",13,10
	   61 73 65 20 70
	   72 6F 76 69 64
	   65 20 31 30 20
	   73 69 67 6E 65
	   64 20 64 65 63
	   69 6D 61 6C 20
	   69 6E 74 65 67
	   65 72 73 2E 20
	   0D 0A
 000000D0  45 61 63 68 20						BYTE	"Each number needs to be small enough to fit inside a 32 bit register. ",13,10
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 62 65 20 73
	   6D 61 6C 6C 20
	   65 6E 6F 75 67
	   68 20 74 6F 20
	   66 69 74 20 69
	   6E 73 69 64 65
	   20 61 20 33 32
	   20 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 20
	   0D 0A
 00000118  41 66 74 65 72						BYTE	"After you have finished inputting the raw numbers I will display ",13,10
	   20 79 6F 75 20
	   68 61 76 65 20
	   66 69 6E 69 73
	   68 65 64 20 69
	   6E 70 75 74 74
	   69 6E 67 20 74
	   68 65 20 72 61
	   77 20 6E 75 6D
	   62 65 72 73 20
	   49 20 77 69 6C
	   6C 20 64 69 73
	   70 6C 61 79 20
	   0D 0A
 0000015B  61 20 6C 69 73						BYTE	"a list of the integers, their sum, and their average value. ",13,10,13,10,0
	   74 20 6F 66 20
	   74 68 65 20 69
	   6E 74 65 67 65
	   72 73 2C 20 74
	   68 65 69 72 20
	   73 75 6D 2C 20
	   61 6E 64 20 74
	   68 65 69 72 20
	   61 76 65 72 61
	   67 65 20 76 61
	   6C 75 65 2E 20
	   0D 0A 0D 0A 00
 0000019C 50 6C 65 61 73	prompt				BYTE	"Please enter a signed number:  ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   20 00
 000001BC 45 52 52 4F 52	error				BYTE	"ERROR: You did not enter an signed number or your number was too big. ",13,10,0
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 6E 20 73 69
	   67 6E 65 64 20
	   6E 75 6D 62 65
	   72 20 6F 72 20
	   79 6F 75 72 20
	   6E 75 6D 62 65
	   72 20 77 61 73
	   20 74 6F 6F 20
	   62 69 67 2E 20
	   0D 0A 00
 00000205 50 6C 65 61 73	prompt_again		BYTE	"Please try again: ",0
	   65 20 74 72 79
	   20 61 67 61 69
	   6E 3A 20 00
 00000218 0D 0A 59 6F 75	display				BYTE	13,10,"You entered the following numbers: ",13,10,0
	   20 65 6E 74 65
	   72 65 64 20 74
	   68 65 20 66 6F
	   6C 6C 6F 77 69
	   6E 67 20 6E 75
	   6D 62 65 72 73
	   3A 20 0D 0A 00
 00000240 54 68 65 20 73	display_sum			BYTE	"The sum of these numbers is: ",0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 00
 0000025E 54 68 65 20 72	display_avg			BYTE	"The rounded average is: ",0
	   6F 75 6E 64 65
	   64 20 61 76 65
	   72 61 67 65 20
	   69 73 3A 20 00
 00000277 0D 0A 54 68 61	goodbye				BYTE	13,10,"Thanks for playing!  ",0
	   6E 6B 73 20 66
	   6F 72 20 70 6C
	   61 79 69 6E 67
	   21 20 20 00
 0000028F 2C 20 00		list_delim			BYTE	", ",0
 00000292 20 00			space				BYTE	" ",0
 00000294 4C 69 6E 65 20	line				BYTE	"Line ",0
	   00
 0000029A 3A 20 00		colon				BYTE	": ",0
 0000029D 53 75 62 74 6F	subtotal			BYTE	"Subtotal: ",0
	   74 61 6C 3A 20
	   00
 000002A8  0000000A [		array				SDWORD	ARRAYSIZE DUP(?)
	    00000000
	   ]
 000002D0  0000000A [		userInput			BYTE	ARRAYSIZE DUP(33)
	    21
	   ]
 000002DA 00000000		bytesRead			DWORD	0
 000002DE 00000000		numInt				SDWORD	0	; the string converted to a number
 000002E2 00000000		sum					SDWORD	0
 000002E6 00000000		avg					SDWORD	0

 00000000			.code
 00000000			main PROC
					; Introduce the program
 00000000  68 0000005B R		PUSH	OFFSET ec_1			;16
 00000005  68 00000000 R		PUSH	OFFSET prog_title	;12
 0000000A  68 00000040 R		PUSH	OFFSET author		;8
 0000000F  E8 000000B1			CALL	introduction

					; Get 10 valid integers from the user
 00000014  68 0000029D R		PUSH	OFFSET subtotal		;60	;ec
 00000019  68 0000029A R		PUSH	OFFSET colon		;56
 0000001E  68 00000294 R		PUSH	OFFSET line			;52 ;ec
 00000023  68 00000292 R		PUSH	OFFSET space		;48	
 00000028  8D 3D 000002DE R		LEA		EDI, numInt	
 0000002E  57				PUSH	EDI					;44
 0000002F  68 000001BC R		PUSH	OFFSET error		;40
 00000034  68 000002A8 R		PUSH	OFFSET array		;36
 00000039  68 000002D0 R		PUSH	OFFSET userInput	;32
 0000003E  FF 35 000002DA R		PUSH	bytesRead			;28
 00000044  6A 20			PUSH	COUNT				;24
 00000046  6A 0A			PUSH	ARRAYSIZE			;20
 00000048  68 000000A1 R		PUSH	OFFSET prompt_intro	;16
 0000004D  68 0000019C R		PUSH	OFFSET prompt		;12
 00000052  68 00000205 R		PUSH	OFFSET prompt_again	;8
 00000057  E8 0000008E			CALL	testProgram

					; Calculate the sum
 0000005C  8D 3D 000002E2 R		LEA		EDI, sum
 00000062  57				PUSH	EDI					;16
 00000063  68 000002A8 R		PUSH	OFFSET array		;12
 00000068  6A 0A			PUSH	ARRAYSIZE			;8
 0000006A  E8 00000321			CALL	calculateSum

					; Calculate the average
 0000006F  FF 35 000002E2 R		PUSH	sum					;20
 00000075  8D 3D 000002E6 R		LEA		EDI, avg
 0000007B  57				PUSH	EDI					;16
 0000007C  68 000002A8 R		PUSH	OFFSET array		;12
 00000081  6A 0A			PUSH	ARRAYSIZE			;8
 00000083  E8 00000334			CALL	calculateAvg

					; Display the integers, their sum, and their average
					;mDisplayString display
 00000088  68 0000028F R		PUSH	OFFSET list_delim	;36
 0000008D  68 00000218 R		PUSH	OFFSET display		;32
 00000092  68 00000240 R		PUSH	OFFSET display_sum	;28
 00000097  68 0000025E R		PUSH	OFFSET display_avg	;24
 0000009C  68 000002A8 R		PUSH	OFFSET array		;20
 000000A1  6A 0A			PUSH	ARRAYSIZE			;16
 000000A3  FF 35 000002E2 R		PUSH	sum					;12	
 000000A9  FF 35 000002E6 R		PUSH	avg					;8
 000000AF  E8 00000366			CALL	displayResults

					; Say goodbye
 000000B4  68 00000277 R		PUSH	OFFSET goodbye
 000000B9  E8 000003BA			CALL	farewell

					Invoke ExitProcess,0	; exit to operating system
 000000BE  6A 00	   *	    push   +000000000h
 000000C0  E8 00000000 E   *	    call   ExitProcess
 000000C5			main ENDP

				;--------------------------------------------------------------
				; Name:	introduction
				;
				; Introduces the program title, programmer's name, and any
				; additional extra credit print statements.
				;
				; Preconditions: all inputs are addresses of null-terminated 
				; strings
				;
				; Postconditions: none.
				;
				; Receives:
				; [ebp+16]		= extra credit statement
				; [ebp+12]		= program title
				; [ebp+8]		= programmer's name
				;
				; Returns:		none; output to terminal only
				;--------------------------------------------------------------
 000000C5			introduction PROC
 000000C5  55				PUSH	EBP
 000000C6  8B EC			MOV		EBP, ESP
					; preserve registers	

					; Introduce the program title
					mDisplayString [EBP+12]
 000000C8  52		     1		PUSH	EDX
 000000C9  8B 55 0C	     1		MOV		EDX, [EBP+12]
 000000CC  E8 00000000 E     1		CALL	WriteString
 000000D1  5A		     1		POP		EDX

					; Introduce the programmer's name
					mDisplayString [EBP+8]
 000000D2  52		     1		PUSH	EDX
 000000D3  8B 55 08	     1		MOV		EDX, [EBP+8]
 000000D6  E8 00000000 E     1		CALL	WriteString
 000000DB  5A		     1		POP		EDX

					; Display the extra credit print statements 
					mDisplayString [EBP+16]
 000000DC  52		     1		PUSH	EDX
 000000DD  8B 55 10	     1		MOV		EDX, [EBP+16]
 000000E0  E8 00000000 E     1		CALL	WriteString
 000000E5  5A		     1		POP		EDX

					; restore registers
 000000E6  5D				POP		EBP
 000000E7  C2 000C			RET		12
 000000EA			introduction ENDP

				;--------------------------------------------------------------
				; Name:	testProgram
				;
				; Test program using ReadVal and WriteVal proceures to 
				; get 10 valid integers from the user, store them in an array
				; and display them, their sum, and their integers.
				;
				; Preconditions: strings are addresses to null-terminated strings,
				; [ebp+36] is an SDWORD array of [ebp+24] size, [ebp+44] is an SDWORD,
				; [ebp+28] is a DWORD, [ebp+24] is one less than [ebp+20]
				;
				; Postconditions: none.
				;
				; Receives:
				; [ebp+60]		= subtotal string (extra credit 1)
				; [ebp+56]		= colon string
				; [ebp+52]		= line (number) string (extra  credit 1)
				; [ebp+48]		= space string
				; [ebp+44]		= user's validated SDWORD
				; [ebp+40]		= error message string
				; [ebp+36]		= array to hold user's numbers
				; [ebp+32]		= string to hold user's input
				; [ebp+28]		= characters entered by user
				; [ebp+24]		= max size user can enter
				; [ebp+20]		= size of array for user's numbers
				; [ebp+16]		= prompt intro string
				; [ebp+12]		= prompt string
				; [ebp+8]		= prompt to try again string
				;
				; Returns:		[ebp+26] filled with converted, validated SDWORDs;
				;				[ebp+28] is update with characters entered by user
				;--------------------------------------------------------------
 000000EA			testProgram PROC
					; Create local variables
					LOCAL	lineNumber: DWORD
					LOCAL	subTotalSum: DWORD

					; Handled by LOCAL dir
					;PUSH	EBP
					;MOV		EBP, ESP

					; preserve registers	
 000000EA  55		   *	    push   ebp
 000000EB  8B EC	   *	    mov    ebp, esp
 000000ED  83 C4 F8	   *	    add    esp, 0FFFFFFF8h
 000000F0  50				PUSH	EAX		
 000000F1  51				PUSH	ECX
 000000F2  56				PUSH	ESI
 000000F3  57				PUSH	EDI

					; initialize local variables
 000000F4  C7 45 FC			MOV		lineNumber, 1
	   00000001
 000000FB  C7 45 F8			MOV		subTotalSum, 0
	   00000000

					; Prep array
 00000102  8B 4D 14			MOV		ECX, [EBP+20]		; array length into ECX
 00000105  8B 7D 24			MOV		EDI, [EBP+36]		; Address of array into EDI

					; Display the prompt intro
					mDisplayString [EBP+16]		;prompt_intro
 00000108  52		     1		PUSH	EDX
 00000109  8B 55 10	     1		MOV		EDX, [EBP+16]
 0000010C  E8 00000000 E     1		CALL	WriteString
 00000111  5A		     1		POP		EDX

					; Get 10 valid integers from the user.
 00000112  8B 4D 14			MOV		ECX, [EBP+20]		;ARRAYSIZE

					;-------------------------------------
					; This loop will fill the array with
					; validated, converted SDWORDS from
					; the user.
					;
					;-------------------------------------
 00000115			_fillLoop:
					; EXTRA CREDIT 1 - display line number
					; for valid input only
					mDisplayString [EBP+52]		;line
 00000115  52		     1		PUSH	EDX
 00000116  8B 55 34	     1		MOV		EDX, [EBP+52]
 00000119  E8 00000000 E     1		CALL	WriteString
 0000011E  5A		     1		POP		EDX
 0000011F  FF 75 FC			PUSH	lineNumber
 00000122  E8 000001CF			CALL	WriteVal
					mDisplayString [EBP+56]		;colon
 00000127  52		     1		PUSH	EDX
 00000128  8B 55 38	     1		MOV		EDX, [EBP+56]
 0000012B  E8 00000000 E     1		CALL	WriteString
 00000130  5A		     1		POP		EDX

					; Read in a validated input
 00000131  FF 75 2C			PUSH	[EBP+44]			;32	;numInt
 00000134  FF 75 08			PUSH	[EBP+8]				;28	;prompt_again
 00000137  FF 75 28			PUSH	[EBP+40]			;24	;error
 0000013A  FF 75 0C			PUSH	[EBP+12]			;20	;prompt
 0000013D  FF 75 18			PUSH	[EBP+24]			;16	;COUNT
 00000140  FF 75 20			PUSH	[EBP+32]			;12	;userInput
 00000143  FF 75 1C			PUSH	[EBP+28]			;8	;bytesRead
 00000146  E8 00000038			CALL	ReadVal

					; Move the validated input into the array
 0000014B  8B 75 2C			MOV		ESI, [EBP+44]		; validated input
 0000014E  8B 06			MOV		EAX, [ESI]			
 00000150  89 07			MOV		[EDI], EAX			; into array
 00000152  83 C7 04			ADD		EDI, 4				; Move to next spot in array to fill

					; EXTRA CREDIT 1 - display running subtotal
 00000155  01 45 F8			ADD		subTotalSum, EAX
					mDisplayString [EBP+60]		;subtotal
 00000158  52		     1		PUSH	EDX
 00000159  8B 55 3C	     1		MOV		EDX, [EBP+60]
 0000015C  E8 00000000 E     1		CALL	WriteString
 00000161  5A		     1		POP		EDX
 00000162  FF 75 F8			PUSH	subTotalSum
 00000165  E8 0000018C			CALL	WriteVal
 0000016A  E8 00000000 E		CALL	CrLf

 0000016F  B8 00000000			MOV		EAX, 0
 00000174  89 06			MOV		[ESI], EAX			; reset placeholder for user's validated SDWORD


 00000176  FF 45 FC			INC		lineNumber			; EXTRA CREDIT 1 - increment only for valid entries
 00000179  E2 9A			LOOP	_fillLoop
					

					; restore registers
 0000017B  5F				POP		EDI
 0000017C  5E				POP		ESI
 0000017D  59				POP		ECX
 0000017E  58				POP		EAX
					;POP		EBP				; Handled by LOCAL dir
 0000017F  C9		   *	    leave  
 00000180  C2 0038			RET		56
 00000183			testProgram ENDP

				;--------------------------------------------------------------
				; Name:	ReadVal
				;
				; Invokes the mGetString macro to get user input in form of ascii 
				; digits, validates the user's input, converts the input to SDWORD,
				; then stores it into the provided memory variable.
				;
				; Preconditions: strings are addresses to null-terminated strings,
				; [ebp+32] is an SDWORD, [ebp+8] is a DWORD, [ebp+24] is one less than
				; input buffer
				;
				; Postconditions: none.
				;
				; Receives:
				; [ebp+32]		= user's validated SDWORD
				; [ebp+28]		= prompt to try again string
				; [ebp+24]		= error message string
				; [ebp+20]		= prompt string
				; [ebp+16]		= max size user can enter
				; [ebp+12]		= string to hold user's input
				; [ebp+8]		= characters entered by user
				;
				; Returns:		[ebp+32] filled with a converted, validated SDWORD;
				;				[ebp+8] is update with characters entered by user
				;--------------------------------------------------------------
 00000183			ReadVal PROC
					; Create local variables
					LOCAL	isValid:	DWORD	; bool for character validation
					LOCAL	isNegative:	DWORD	; bool for whether user input is negative

					; Handled by LOCAL dir
					;PUSH	EBP
					;MOV		EBP, ESP
					
					; preserve registers	
 00000183  55		   *	    push   ebp
 00000184  8B EC	   *	    mov    ebp, esp
 00000186  83 C4 F8	   *	    add    esp, 0FFFFFFF8h
 00000189  50				PUSH	EAX		
 0000018A  53				PUSH	EBX		
 0000018B  51				PUSH	ECX
 0000018C  52				PUSH	EDX
 0000018D  56				PUSH	ESI
 0000018E  57				PUSH	EDI

					; initialize local variables
 0000018F  C7 45 FC			MOV		isValid, 1
	   00000001
 00000196  C7 45 F8			MOV		isNegative, 0
	   00000000

					;-------------------------------------
					; This loop will repeat until a valid
					; signed integer is entered by the user.
					;
					;-------------------------------------
 0000019D			_startLoop:
					; Invoke myGetString macro to get user input in form of string of digits.
					; If the user entered an invalid response in the preceding attempt,
					; it will prompt with the 'try again' message instead.

 0000019D  8B 45 FC			MOV		EAX, isValid
 000001A0  83 F8 00			CMP		EAX, 0
 000001A3  74 02			JE		_getStringAgain		; user entered invalid input in preceding attempt
 000001A5  EB 21			JMP		_getString

 000001A7			_getStringAgain:
					mGetString [EBP+28], [EBP+12], [EBP+16], [EBP+8]
 000001A7  52		     1		PUSH	EDX
 000001A8  51		     1		PUSH	ECX
 000001A9  52		     2		PUSH	EDX
 000001AA  8B 55 1C	     2		MOV		EDX, [EBP+28]
 000001AD  E8 00000000 E     2		CALL	WriteString
 000001B2  5A		     2		POP		EDX
 000001B3  8B 55 0C	     1		MOV		EDX, [EBP+12]
 000001B6  8B 4D 10	     1		MOV		ECX, [EBP+16]
 000001B9  E8 00000000 E     1		CALL	ReadString
 000001BE  89 55 0C	     1		MOV		[EBP+12], EDX
 000001C1  89 45 08	     1		MOV		[EBP+8], EAX
 000001C4  59		     1		POP		ECX
 000001C5  5A		     1		POP		EDX
 000001C6  EB 2C			JMP		_continueStartLoop
 000001C8			_getString:
					mGetString [EBP+20], [EBP+12], [EBP+16], [EBP+8]
 000001C8  52		     1		PUSH	EDX
 000001C9  51		     1		PUSH	ECX
 000001CA  52		     2		PUSH	EDX
 000001CB  8B 55 14	     2		MOV		EDX, [EBP+20]
 000001CE  E8 00000000 E     2		CALL	WriteString
 000001D3  5A		     2		POP		EDX
 000001D4  8B 55 0C	     1		MOV		EDX, [EBP+12]
 000001D7  8B 4D 10	     1		MOV		ECX, [EBP+16]
 000001DA  E8 00000000 E     1		CALL	ReadString
 000001DF  89 55 0C	     1		MOV		[EBP+12], EDX
 000001E2  89 45 08	     1		MOV		[EBP+8], EAX
 000001E5  59		     1		POP		ECX
 000001E6  5A		     1		POP		EDX

					; Check input string size -
					; Too large
 000001E7  8B 45 08			MOV		EAX, [EBP+8]
 000001EA  83 F8 04			CMP		EAX, 4
 000001ED  7F 1E			JG		_sizeInvalid
					; Too Small - empty string
 000001EF  83 F8 00			CMP		EAX, 0
 000001F2  74 19			JE		_sizeInvalid

 000001F4			_continueStartLoop:
 000001F4  8D 7D FC			LEA		EDI, isValid
 000001F7  57				PUSH	EDI						;16	;isValid
 000001F8  FF 75 08			PUSH	[EBP+8]					;12	;bytesRead
 000001FB  FF 75 0C			PUSH	[EBP+12]				;8	;userInput
 000001FE  E8 0000008A			CALL	validate

					; if the input was invalid, send an error message
 00000203  8B 45 FC			MOV		EAX, isValid
 00000206  83 F8 00			CMP		EAX, 0
 00000209  74 09			JE		_notifyInvalid

					; else string is valid
 0000020B  EB 16			JMP		_stringIsValid

 0000020D			_sizeInvalid:
 0000020D  C7 45 FC			MOV		isValid, 0				; set the bool value if string size was invalid
	   00000000

					; if invalid input given, display the error message
 00000214			_notifyInvalid:
					mDisplayString [EBP+24]			;error
 00000214  52		     1		PUSH	EDX
 00000215  8B 55 18	     1		MOV		EDX, [EBP+24]
 00000218  E8 00000000 E     1		CALL	WriteString
 0000021D  5A		     1		POP		EDX

 0000021E  E9 FFFFFF7A			JMP		_startLoop

					;-------------------------------------
					; Start conversion after user has
					; entered a validated string of ascii
					; digits.
					;
					;-------------------------------------
 00000223			_stringIsValid:

				; converting to SDWORD
											; Prepare:
 00000223  8B 4D 08			MOV		ECX, [EBP+8]	; length of validated string
 00000226  8B 75 0C			MOV		ESI, [EBP+12]	; String holding user input

 00000229  8B 7D 20			MOV		EDI, [EBP+32]	; SDWORD to hold converted value
 0000022C  B8 00000000			MOV		EAX, 0
 00000231  89 07			MOV		[EDI], EAX
					
					;-------------------------------------
					; This loop performs the actual conversion
					; of the ascii digit string to SDWORD. Formula
					; is from Module 8, Exploration 1 of course
					; material (retreived March 2021).
					;
					;-------------------------------------
 00000233			_convertLoop:				; For length of string
 00000233  AC				LODSB					; Place byte into AL

					; check whether user entered a sign
 00000234			_potentialSign:
					; check if plus sign
 00000234  3C 2B			CMP		AL, 43			;+
 00000236  74 1D			JE		_continueConvert

					; check if negative sign
 00000238  3C 2D			CMP		AL, 45			;-
 0000023A  74 02			JE		_isNeg
 0000023C  EB 09			JMP		_startConvert

					; if it's negative, set the bool checker value
 0000023E			_isNeg:
 0000023E  C7 45 F8			MOV		isNegative, 1
	   00000001
 00000245  EB 0E			JMP		_continueConvert

					; have reached number portion of string; 
					; start conversion
 00000247			_startConvert:
 00000247  2C 30			SUB		AL, 48			; subtract 48, per Module formula
 00000249  0F BE D8			MOVSX	EBX, AL

 0000024C  8B 07			MOV		EAX, [EDI]		; multiply by 10, per Module formula
 0000024E  6B C0 0A			IMUL	EAX, 10			

 00000251  03 C3			ADD		EAX, EBX		; Add these two together, per Module formula
 00000253  89 07			MOV		[EDI], EAX		; Store it into the SDWORD holder of user input
 00000255			_continueConvert:
 00000255  E2 DC			LOOP	_convertLoop	; repeat for length of string

					; check if number is negative to perform additional needed steps
 00000257  83 7D F8 01			CMP		isNegative, 1
 0000025B  74 02			JE		_makeNeg
 0000025D  EB 07			JMP		_endReadVal

					; if number is negative, perform two's complement negation
					; so Module formula can work
 0000025F			_makeNeg:
 0000025F  8B 07			MOV		EAX, [EDI]
 00000261  6B C0 FF			IMUL	EAX, -1
 00000264  89 07			MOV		[EDI], EAX		

 00000266			_endReadVal:	

					; restore registers
 00000266  5F				POP		EDI
 00000267  5E				POP		ESI
 00000268  5A				POP		EDX
 00000269  59				POP		ECX
 0000026A  5B				POP		EBX		
 0000026B  58				POP		EAX
					;POP		EBP					; Handled by LOCAL dir
 0000026C  C9		   *	    leave  
 0000026D  C2 001C			RET		28
 00000270			ReadVal ENDP

				;--------------------------------------
				; 
				; (if necessary).
				; preconditions:	
				; postconditions:	
				; receives:			aString, stringLength,
				; returns:			
				;--------------------------------------
 00000270			resetString PROC
 00000270  55				PUSH	EBP
 00000271  8B EC			MOV		EBP, ESP

					; preserve registers
 00000273  50				PUSH	EAX		
 00000274  53				PUSH	EBX		
 00000275  51				PUSH	ECX
 00000276  52				PUSH	EDX
 00000277  56				PUSH	ESI
 00000278  57				PUSH	EDI

 00000279  B0 00			MOV		AL, 0
 0000027B  8B 7D 08			MOV		EDI, [EBP+8]		; aString
 0000027E  8B 4D 0C			MOV		ECX, [EBP+12]		; stringLength
 00000281  F3/ AA			REP		STOSB
				;_resetLoop:
					;STOSB						; move 0 from AL into userInpug
					;REP
					;LOOP	_resetLoop


					; restore registers
 00000283  5F				POP		EDI
 00000284  5E				POP		ESI
 00000285  5A				POP		EDX
 00000286  59				POP		ECX
 00000287  5B				POP		EBX		
 00000288  58				POP		EAX
 00000289  5D				POP		EBP			; Handled by LOCAL dir
 0000028A  C2 0008			RET		8
 0000028D			resetString ENDP


				;--------------------------------------
				; 
				; (if necessary).
				; preconditions:	
				; postconditions:	
				; receives:			
				; returns:			
				;--------------------------------------
 0000028D			validate PROC
					; Create local variables
					LOCAL	index:	DWORD	; placeholder in string

					; Handled by LOCAL dir
					;PUSH	EBP
					;MOV		EBP, ESP

					; preserve registers
 0000028D  55		   *	    push   ebp
 0000028E  8B EC	   *	    mov    ebp, esp
 00000290  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 00000293  50				PUSH	EAX		
 00000294  53				PUSH	EBX		
 00000295  51				PUSH	ECX
 00000296  52				PUSH	EDX
 00000297  56				PUSH	ESI
 00000298  57				PUSH	EDI

					; initialize local variables
 00000299  C7 45 FC			MOV		index, 0
	   00000000

 000002A0  8B 4D 0C			MOV		ECX, [EBP+12]	; String length into ECX
 000002A3  41				INC		ECX				; Account for null-terminator
 000002A4  8B 75 08			MOV		ESI, [EBP+8]	; Address of string into ESI

 000002A7  8B 7D 10			MOV		EDI, [EBP+16]	; Reset bool value
 000002AA  B8 00000001			MOV		EAX, 1
 000002AF  89 07			MOV		[EDI], EAX


 000002B1			_validateLoop:	
 000002B1  AC				LODSB	; Puts byte in AL

					; check if signed
 000002B2  50				PUSH	EAX				; preserve AL before first char check

 000002B3  8B 45 FC			MOV		EAX, index
 000002B6  83 F8 00			CMP		EAX, 0
 000002B9  74 02			JE		_checkSign
 000002BB  EB 0B			JMP		_checkNumber


					; check first character if it's not a number
 000002BD			_checkSign:
 000002BD  58				POP		EAX				; restore AL before first char check

					; check if plus sign
 000002BE  3C 2B			CMP		AL, 43			;+
 000002C0  74 15			JE		_isValidChar

					; check if negative sign
 000002C2  3C 2D			CMP		AL, 45			;-
 000002C4  74 11			JE		_isValidChar
 000002C6  EB 01			JMP		_continueCheck

					; check if characters are numbers
 000002C8			_checkNumber:
 000002C8  58				POP		EAX				; restore AL before first char check

 000002C9			_continueCheck:
					; check if end of string
 000002C9  3C 00			CMP		AL, 0
 000002CB  74 1F			JE		_endOfString

 000002CD  3C 30			CMP		AL, 48			;0
 000002CF  7C 0E			JL		_invalidChar
 000002D1  3C 39			CMP		AL, 57			;9
 000002D3  7F 0A			JG		_invalidChar
 000002D5  EB 00			JMP		_isValidChar

 000002D7			_isValidChar:
 000002D7  FF 45 FC			INC		index
 000002DA  AA				STOSB
 000002DB  E2 D4			LOOP	_validateLoop
 000002DD  EB 0D			JMP		_endOfString

 000002DF			_invalidChar:
 000002DF  8B 7D 10			MOV		EDI, [EBP+16]
 000002E2  B8 00000000			MOV		EAX, 0
 000002E7  89 07			MOV		[EDI], EAX

 000002E9  8B 55 10			MOV		EDX, [EBP+16]
					;CALL	WriteDec	; debug only

					;LEA		EAX, [EBP+16]
					;MOV		EAX, 0

					;MOV		EAX, [EBP+16]
					;MOV		EAX, [EDI]
					;CALL	WriteDec

 000002EC			_endOfString:
					; restore registers
 000002EC  5F				POP		EDI
 000002ED  5E				POP		ESI
 000002EE  5A				POP		EDX
 000002EF  59				POP		ECX
 000002F0  5B				POP		EBX		
 000002F1  58				POP		EAX
					;POP		EBP			; Handled by LOCAL dir
 000002F2  C9		   *	    leave  
 000002F3  C2 000C			RET		12
 000002F6			validate ENDP


				;--------------------------------------
				; 
				;
				; preconditions:	
				; postconditions:	number (val)
				; receives:			
				; returns:			
				;--------------------------------------
 000002F6			WriteVal PROC
					; Create local variables
					LOCAL	string[33]:	BYTE	; placeholder in string
					LOCAL	reverseString[33]: BYTE	;placeholder for reversed string
					LOCAL	number: DWORD	; placeholder for number
					LOCAL	byteCounter: DWORD

					; Handled by LOCAL dir
					;PUSH	EBP
					;MOV		EBP, ESP

					; preserve registers
 000002F6  55		   *	    push   ebp
 000002F7  8B EC	   *	    mov    ebp, esp
 000002F9  83 C4 B4	   *	    add    esp, 0FFFFFFB4h
 000002FC  50				PUSH	EAX		
 000002FD  53				PUSH	EBX		
 000002FE  51				PUSH	ECX
 000002FF  52				PUSH	EDX
 00000300  56				PUSH	ESI
 00000301  57				PUSH	EDI

 00000302  C7 45 B4			MOV		byteCounter, 0
	   00000000

					; Convert numeric SDWORD value to string of ascii digits
 00000309  B8 00000000			MOV		EAX, 0
 0000030E  8B 45 08			MOV		EAX, [EBP+8]	
 00000311  89 45 B8			MOV		number, EAX

					; Prep local variable to hold the converted string
					;MOV		EAX, OFFSET string
					;MOV		EDI, EAX
					;XOR		EDI, EDI
 00000314  8D 7D DF			LEA			EDI, string


 00000317			_startNumberConversion:
 00000317  B9 00000063			MOV		ECX, 99
 0000031C  8B 45 B8			MOV		EAX, number		; divide by 10
 0000031F  83 F8 00			CMP		EAX, 0
 00000322  7C 02			JL		_negNegative
 00000324  EB 02			JMP		_isANumberLoop

 00000326			_negNegative:
 00000326  F7 D8			NEG		EAX

					; not sign character at this point
 00000328			_isANumberLoop:
 00000328  BB 0000000A			MOV		EBX, 10
 0000032D  99				CDQ
 0000032E  F7 FB			IDIV	EBX

					;PUSH	EAX				; save quotient for next character
 00000330  8B D8			MOV		EBX, EAX

 00000332  8B C2			MOV		EAX, EDX
 00000334  83 C0 30			ADD		EAX, 48			; add 48 
					;MOV		AL, AX		; add to string
 00000337  AA				STOSB				
 00000338  FF 45 B4			INC		byteCounter
					;LEA		EDX, string			; debug only
					;CALL	WriteString			; debug only
					;POP		EAX				; restore quotient
 0000033B  8B C3			MOV		EAX, EBX

 0000033D  83 F8 00			CMP		EAX, 0
 00000340  74 02			JE		_noMoreLoops
 00000342  EB 05			JMP		_continueIsANumber

 00000344			_noMoreLoops:
 00000344  B9 00000001			MOV		ECX, 1

 00000349			_continueIsANumber:
 00000349  E2 DD			LOOP	_isANumberLoop


					; check sign
 0000034B  8B 45 B8			MOV		EAX, number
 0000034E  83 F8 00			CMP		EAX, 0
 00000351  7D 02			JGE		_isPositive
 00000353  EB 02			JMP		_isNegative

 00000355			_isPositive:
					;MOV		AL, 43			;+
					;STOSB
					;INC		byteCounter
					;LEA		EDX, string			; debug only
					;CALL	WriteString			; debug only
 00000355  EB 06			JMP		_addNullTerminator

 00000357			_isNegative:
 00000357  B0 2D			MOV		AL, 45			;-
					;LEA		EDX, string			; debug only
					;CALL	WriteString			; debug only
 00000359  AA				STOSB
 0000035A  FF 45 B4			INC		byteCounter

 0000035D			_addNullTerminator:
					; add null-terminator
 0000035D  B0 00			MOV		AL, 0
 0000035F  AA				STOSB
 00000360  FF 45 B4			INC		byteCounter

					; reverse the string
					; Adapted from StringManipulator.asm demo video (retrieved March 2021):
 00000363  8B 4D B4			  MOV	ECX, byteCounter
 00000366  8D 75 DF			  LEA	ESI, string
 00000369  03 F1			  ADD	ESI, ECX
 0000036B  49				  DEC	ECX
 0000036C  4E				  DEC	ESI
 0000036D  4E				  DEC	ESI
 0000036E  8D 7D BE			  LEA	EDI, reverseString

					; Reverse string
 00000371			_revLoop:
 00000371  FD				STD
 00000372  AC				LODSB
 00000373  FC				CLD
 00000374  AA				STOSB
 00000375  E2 FA			LOOP	_revLoop

					; add null-terminator
 00000377  B0 00			MOV		AL, 0
 00000379  AA				STOSB

					; print the ascii representation
 0000037A  8D 55 BE			LEA		EDX, reverseString			; debug only
					;CALL	WriteString			; debug only
					mDisplayString EDX
 0000037D  52		     1		PUSH	EDX
 0000037E  8B D2	     1		MOV		EDX, EDX
 00000380  E8 00000000 E     1		CALL	WriteString
 00000385  5A		     1		POP		EDX

					; debug only
					;LEA		EDX, string			; debug only
					;CALL	WriteString			; debug only
					;mDisplayString EDX


 00000386			_endOfWriteVal:
					; restore registers
 00000386  5F				POP		EDI
 00000387  5E				POP		ESI
 00000388  5A				POP		EDX
 00000389  59				POP		ECX
 0000038A  5B				POP		EBX		
 0000038B  58				POP		EAX
					;POP		EBP			; Handled by LOCAL dir
 0000038C  C9		   *	    leave  
 0000038D  C2 0004			RET		4
 00000390			WriteVal ENDP


					;PUSH	sum					;16
					;PUSH	OFFSET array		;12
					;PUSH	ARRAYSIZE			;8
				;--------------------------------------
				; 
				; (if necessary).
				; preconditions:	
				; postconditions:	
				; receives:			
				; returns:			
				;--------------------------------------
 00000390			calculateSum PROC
 00000390  55				PUSH	EBP
 00000391  8B EC			MOV		EBP, ESP
					; preserve registers
 00000393  50				PUSH	EAX		
 00000394  53				PUSH	EBX		
 00000395  51				PUSH	ECX
 00000396  52				PUSH	EDX
 00000397  56				PUSH	ESI
 00000398  57				PUSH	EDI


					; calculate
 00000399  8B 75 0C			MOV		ESI, [EBP+12]	;array
 0000039C  8B 4D 08			MOV		ECX, [EBP+8]	;ARRAYSIZE
 0000039F  8B 7D 10			MOV		EDI, [EBP+16]
 000003A2  8B 07			MOV		EAX, [EDI]	;sum

 000003A4			_sumLoop:
 000003A4  8B 1E			MOV		EBX, [ESI]
 000003A6  03 C3			ADD		EAX, EBX			; add value in the array to sum
 000003A8  83 C6 04			ADD		ESI, TYPE SDWORD	; point to next element in the array
 000003AB  E2 F7			LOOP	_sumLoop

					;MOV		[EBP+16], EAX
					;MOV		EAX, [EBP+16]	; debug only
					;CALL	WriteInt		; debug only

 000003AD  8B 7D 10			MOV		EDI, [EBP+16]
 000003B0  89 07			MOV		[EDI], EAX

					; restore registers
 000003B2  5F				POP		EDI
 000003B3  5E				POP		ESI
 000003B4  5A				POP		EDX
 000003B5  59				POP		ECX
 000003B6  5B				POP		EBX		
 000003B7  58				POP		EAX
 000003B8  5D				POP		EBP
 000003B9  C2 000C			RET		12
 000003BC			calculateSum ENDP


					;PUSH	sum					;20
					;PUSH	avg					;16
					;PUSH	OFFSET array		;12
					;PUSH	ARRAYSIZE			;8
				;--------------------------------------
				; 
				; (if necessary).
				; preconditions:	
				; postconditions:	
				; receives:			

				; returns:			
				;--------------------------------------
 000003BC			calculateAvg PROC
 000003BC  55				PUSH	EBP
 000003BD  8B EC			MOV		EBP, ESP
					; preserve registers
 000003BF  50				PUSH	EAX		
 000003C0  53				PUSH	EBX		
 000003C1  51				PUSH	ECX
 000003C2  52				PUSH	EDX
 000003C3  56				PUSH	ESI
 000003C4  57				PUSH	EDI


					; calculate the average
 000003C5  8B 45 14			MOV		EAX, [EBP+20]
 000003C8  8B 5D 08			MOV		EBX, [EBP+8]
 000003CB  99				CDQ
 000003CC  F7 FB			IDIV	EBX

					; if the average is negative, round down instead.
					; Used the below link as reference for rounding 
					; negatives to 'floor' (Retrieved March 2021):
					; https://www.calculator.net/rounding-calculator.html?cnum=-321.9&cpre=0&cpren=2&cmode=nearest&sp=0&x=0&y=0
 000003CE  83 F8 00			CMP		EAX, 0
 000003D1  7C 02			JL		_roundDown
 000003D3  EB 01			JMP		_storeAverage

 000003D5			_roundDown:
 000003D5  48				DEC		EAX

 000003D6			_storeAverage:
 000003D6  8B 7D 10			MOV		EDI, [EBP+16]
 000003D9  89 07			MOV		[EDI], EAX

					; restore registers
 000003DB  5F				POP		EDI
 000003DC  5E				POP		ESI
 000003DD  5A				POP		EDX
 000003DE  59				POP		ECX
 000003DF  5B				POP		EBX		
 000003E0  58				POP		EAX
 000003E1  5D				POP		EBP
 000003E2  C2 0010			RET 16
 000003E5			calculateAvg ENDP

				;--------------------------------------
				; Traverses an array and prints out its values with a space
				; in-between each number.
				;
				; preconditions:	someArray is a DWORD array the size of ARRAYSIZE,
				;					ARRAYSIZE is the size of the array,
				;					someTitle contains a string
				; postconditions:	EAX, EBX, ECX, EDX changed but restored
				; receives:			someTitle, someArray, ARRAYSIZE 
				; returns:			none; output to terminal only
				;--------------------------------------
 000003E5			printArray PROC
 000003E5  55				PUSH	EBP
 000003E6  8B EC			MOV		EBP, ESP

					; preserve registers
 000003E8  50				PUSH	EAX		
 000003E9  53				PUSH	EBX		
 000003EA  51				PUSH	ECX
 000003EB  52				PUSH	EDX
 000003EC  56				PUSH	ESI
 000003ED  57				PUSH	EDI

					; Access the list
 000003EE  8B 4D 08			MOV		ECX, [EBP+8]	; List length into ECX
 000003F1  8B 75 0C			MOV		ESI, [EBP+12]	; Address of list into EDI


					; traverse the list and print each number
					; with a space in-between. Prints new line
					; every 20 numbers
 000003F4			_displayLoop:
 000003F4  8B 06			MOV		EAX, [ESI]		; Print out a number in the list
					;CALL	WriteInt		; debug only
 000003F6  50				PUSH	EAX				;8
					;CALL	WriteInt		; debug only
 000003F7  E8 FFFFFEFA			CALL	WriteVal

 000003FC  83 F9 01			CMP		ECX, 1
 000003FF  74 0A			JE		_noDelim
					mDisplayString [EBP+16]		; print out delim character
 00000401  52		     1		PUSH	EDX
 00000402  8B 55 10	     1		MOV		EDX, [EBP+16]
 00000405  E8 00000000 E     1		CALL	WriteString
 0000040A  5A		     1		POP		EDX


 0000040B			_noDelim:
 0000040B  83 C6 04			ADD		ESI, 4			; Move to the next element in list
 0000040E  E2 E4			LOOP	_displayLoop

					


					; restore registers
 00000410  5F				POP		EDI
 00000411  5E				POP		ESI
 00000412  5A				POP		EDX
 00000413  59				POP		ECX
 00000414  5B				POP		EBX		
 00000415  58				POP		EAX
 00000416  5D				POP		EBP			
 00000417  C2 000C			RET		12
 0000041A			printArray ENDP


					;PUSH	OFFSET list_delim	;36
					;PUSH	OFFSET display		;32
					;PUSH	OFFSET display_sum	;28
					;PUSH	OFFSET display_avg	;24
					;PUSH	OFFSET array		;20
					;PUSH	ARRAYSIZE			;16
					;PUSH	sum					;12	
					;PUSH	avg					;8
				;--------------------------------------
				; 
				; (if necessary).
				; preconditions:	
				; postconditions:	
				; receives:			
				; returns:			
				;--------------------------------------
 0000041A			displayResults PROC
 0000041A  55				PUSH	EBP
 0000041B  8B EC			MOV		EBP, ESP
					; preserve registers	
 0000041D  50				PUSH	EAX		
 0000041E  53				PUSH	EBX		
 0000041F  51				PUSH	ECX
 00000420  52				PUSH	EDX
 00000421  56				PUSH	ESI
 00000422  57				PUSH	EDI

					; Display the integers
					mDisplayString [EBP+32]
 00000423  52		     1		PUSH	EDX
 00000424  8B 55 20	     1		MOV		EDX, [EBP+32]
 00000427  E8 00000000 E     1		CALL	WriteString
 0000042C  5A		     1		POP		EDX
 0000042D  FF 75 24			PUSH	[EBP+36]	;16	;list_delim
 00000430  FF 75 14			PUSH	[EBP+20]	;12	;array
 00000433  FF 75 10			PUSH	[EBP+16]	;8	;ARRAYSIZE
 00000436  E8 FFFFFFAA			CALL	printArray
 0000043B  E8 00000000 E		CALL	CrLf			; Was told can use this per Piazza question @446 discussion thread


					; Display the sum
					mDisplayString [EBP+28]
 00000440  52		     1		PUSH	EDX
 00000441  8B 55 1C	     1		MOV		EDX, [EBP+28]
 00000444  E8 00000000 E     1		CALL	WriteString
 00000449  5A		     1		POP		EDX
 0000044A  FF 75 0C			PUSH	[EBP+12]	;8	;sum
 0000044D  E8 FFFFFEA4			CALL	WriteVal
 00000452  E8 00000000 E		CALL	CrLf			; Was told can use this per Piazza question @446 discussion thread

					; Display the average
					mDisplayString [EBP+24]
 00000457  52		     1		PUSH	EDX
 00000458  8B 55 18	     1		MOV		EDX, [EBP+24]
 0000045B  E8 00000000 E     1		CALL	WriteString
 00000460  5A		     1		POP		EDX
 00000461  FF 75 08			PUSH	[EBP+8]		;8	;sum
 00000464  E8 FFFFFE8D			CALL	WriteVal
 00000469  E8 00000000 E		CALL	CrLf			; Was told can use this per Piazza question @446 discussion thread

					; restore registers
 0000046E  5F				POP		EDI
 0000046F  5E				POP		ESI
 00000470  5A				POP		EDX
 00000471  59				POP		ECX
 00000472  5B				POP		EBX		
 00000473  58				POP		EAX
 00000474  5D				POP		EBP
 00000475  C2 0020			RET		32
 00000478			displayResults ENDP

				;--------------------------------------
				; Displays a parting message
				;
				; preconditions:	goodbye is a string that contains a farewell message
				; postconditions:	EDX changed changed but restored
				; receives:			goodbye
				; returns:			none; prints to terminal only
				;--------------------------------------
 00000478			farewell PROC
 00000478  55				PUSH	EBP
 00000479  8B EC			MOV		EBP, ESP
					; preserve registers
 0000047B  52				PUSH	EDX

 0000047C  8B 55 08			MOV		EDX, [EBP+8]
 0000047F  E8 00000000 E		CALL	WriteString

					; restore registers
 00000484  5A				POP		EDX
 00000485  5D				POP		EBP
 00000486  C3				RET
 00000487			farewell ENDP


				END main
Microsoft (R) Macro Assembler Version 14.24.28314.0	    03/16/21 22:59:30
<Project 6 - String Primitives and Macros      (Proj6_malpay  Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000002EA Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000487 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000183 _TEXT	Length= 000000ED Public STDCALL
  isValid  . . . . . . . . . . .	DWord	 bp - 00000004
  isNegative . . . . . . . . . .	DWord	 bp - 00000008
  _startLoop . . . . . . . . . .	L Near	 0000019D _TEXT	
  _getStringAgain  . . . . . . .	L Near	 000001A7 _TEXT	
  _getString . . . . . . . . . .	L Near	 000001C8 _TEXT	
  _continueStartLoop . . . . . .	L Near	 000001F4 _TEXT	
  _sizeInvalid . . . . . . . . .	L Near	 0000020D _TEXT	
  _notifyInvalid . . . . . . . .	L Near	 00000214 _TEXT	
  _stringIsValid . . . . . . . .	L Near	 00000223 _TEXT	
  _convertLoop . . . . . . . . .	L Near	 00000233 _TEXT	
  _potentialSign . . . . . . . .	L Near	 00000234 _TEXT	
  _isNeg . . . . . . . . . . . .	L Near	 0000023E _TEXT	
  _startConvert  . . . . . . . .	L Near	 00000247 _TEXT	
  _continueConvert . . . . . . .	L Near	 00000255 _TEXT	
  _makeNeg . . . . . . . . . . .	L Near	 0000025F _TEXT	
  _endReadVal  . . . . . . . . .	L Near	 00000266 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 000002F6 _TEXT	Length= 0000009A Public STDCALL
  string . . . . . . . . . . . .	Byte	 bp - 00000021
  reverseString  . . . . . . . .	Byte	 bp - 00000042
  number . . . . . . . . . . . .	DWord	 bp - 00000048
  byteCounter  . . . . . . . . .	DWord	 bp - 0000004C
  _startNumberConversion . . . .	L Near	 00000317 _TEXT	
  _negNegative . . . . . . . . .	L Near	 00000326 _TEXT	
  _isANumberLoop . . . . . . . .	L Near	 00000328 _TEXT	
  _noMoreLoops . . . . . . . . .	L Near	 00000344 _TEXT	
  _continueIsANumber . . . . . .	L Near	 00000349 _TEXT	
  _isPositive  . . . . . . . . .	L Near	 00000355 _TEXT	
  _isNegative  . . . . . . . . .	L Near	 00000357 _TEXT	
  _addNullTerminator . . . . . .	L Near	 0000035D _TEXT	
  _revLoop . . . . . . . . . . .	L Near	 00000371 _TEXT	
  _endOfWriteVal . . . . . . . .	L Near	 00000386 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
calculateAvg . . . . . . . . . .	P Near	 000003BC _TEXT	Length= 00000029 Public STDCALL
  _roundDown . . . . . . . . . .	L Near	 000003D5 _TEXT	
  _storeAverage  . . . . . . . .	L Near	 000003D6 _TEXT	
calculateSum . . . . . . . . . .	P Near	 00000390 _TEXT	Length= 0000002C Public STDCALL
  _sumLoop . . . . . . . . . . .	L Near	 000003A4 _TEXT	
displayResults . . . . . . . . .	P Near	 0000041A _TEXT	Length= 0000005E Public STDCALL
farewell . . . . . . . . . . . .	P Near	 00000478 _TEXT	Length= 0000000F Public STDCALL
introduction . . . . . . . . . .	P Near	 000000C5 _TEXT	Length= 00000025 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000C5 Public STDCALL
printArray . . . . . . . . . . .	P Near	 000003E5 _TEXT	Length= 00000035 Public STDCALL
  _displayLoop . . . . . . . . .	L Near	 000003F4 _TEXT	
  _noDelim . . . . . . . . . . .	L Near	 0000040B _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
resetString  . . . . . . . . . .	P Near	 00000270 _TEXT	Length= 0000001D Public STDCALL
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
testProgram  . . . . . . . . . .	P Near	 000000EA _TEXT	Length= 00000099 Public STDCALL
  lineNumber . . . . . . . . . .	DWord	 bp - 00000004
  subTotalSum  . . . . . . . . .	DWord	 bp - 00000008
  _fillLoop  . . . . . . . . . .	L Near	 00000115 _TEXT	
validate . . . . . . . . . . . .	P Near	 0000028D _TEXT	Length= 00000069 Public STDCALL
  index  . . . . . . . . . . . .	DWord	 bp - 00000004
  _validateLoop  . . . . . . . .	L Near	 000002B1 _TEXT	
  _checkSign . . . . . . . . . .	L Near	 000002BD _TEXT	
  _checkNumber . . . . . . . . .	L Near	 000002C8 _TEXT	
  _continueCheck . . . . . . . .	L Near	 000002C9 _TEXT	
  _isValidChar . . . . . . . . .	L Near	 000002D7 _TEXT	
  _invalidChar . . . . . . . . .	L Near	 000002DF _TEXT	
  _endOfString . . . . . . . . .	L Near	 000002EC _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 0000000Ah   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
COUNT  . . . . . . . . . . . . .	Number	 00000020h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
array  . . . . . . . . . . . . .	DWord	 000002A8 _DATA	
author . . . . . . . . . . . . .	Byte	 00000040 _DATA	
avg  . . . . . . . . . . . . . .	DWord	 000002E6 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
bytesRead  . . . . . . . . . . .	DWord	 000002DA _DATA	
colon  . . . . . . . . . . . . .	Byte	 0000029A _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
display_avg  . . . . . . . . . .	Byte	 0000025E _DATA	
display_sum  . . . . . . . . . .	Byte	 00000240 _DATA	
display  . . . . . . . . . . . .	Byte	 00000218 _DATA	
ec_1 . . . . . . . . . . . . . .	Byte	 0000005B _DATA	
error  . . . . . . . . . . . . .	Byte	 000001BC _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 00000277 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
line . . . . . . . . . . . . . .	Byte	 00000294 _DATA	
list_delim . . . . . . . . . . .	Byte	 0000028F _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
numInt . . . . . . . . . . . . .	DWord	 000002DE _DATA	
prog_title . . . . . . . . . . .	Byte	 00000000 _DATA	
prompt_again . . . . . . . . . .	Byte	 00000205 _DATA	
prompt_intro . . . . . . . . . .	Byte	 000000A1 _DATA	
prompt . . . . . . . . . . . . .	Byte	 0000019C _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
space  . . . . . . . . . . . . .	Byte	 00000292 _DATA	
subtotal . . . . . . . . . . . .	Byte	 0000029D _DATA	
sum  . . . . . . . . . . . . . .	DWord	 000002E2 _DATA	
userInput  . . . . . . . . . . .	Byte	 000002D0 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
