Microsoft (R) Macro Assembler Version 14.24.28314.0	    03/14/21 13:44:09
<Project 6 - String Primitives and Macros      (Proj6_malpay  Page 1 - 1


				TITLE Project 6 - String Primitives and Macros      (Proj6_malpayae.asm)

				; Author:	Eva Malpaya
				; Last Modified:	3/14/2021
				; OSU email address: malpayae@oregonstate.edu
				; Course number/section:   CS271 Section 401
				; Project Number:	6                Due Date:	3/14/2021
				; Description: This program prompts the user to enter numbers to be
				; entered into an array, validates the input, then displays the array.
				;
				; Note: 'array' and 'list' may be used interchangeably in my comments

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				;--------------------------------------
				; 
				; preconditions:	
				; postconditions:	
				; receives:			prompt, userInput, count, bytesRead
				; returns:			userInput, bytesRead updated
				;--------------------------------------
				mGetString MACRO prompt, userInput, count, bytesRead
					; Display a prompt
					mDisplayString prompt

					; Get user's keyboard input into a memory location
					MOV		EDX, userInput
					MOV		ECX, count
					CALL	ReadString
					MOV		userInput, EDX
					MOV		bytesRead, EAX

				ENDM


				;--------------------------------------
				; 
				; preconditions:	
				; postconditions:	
				; receives:			string (ref)
				; returns:			
				;--------------------------------------
				mDisplayString MACRO string
					PUSH	EDX
					MOV		EDX, string
					CALL	WriteString
					POP		EDX

				ENDM

				; Required constants
 = 0000001F			COUNT =		31		; length of input string can accomodate
 = 0000000A			ARRAYSIZE = 10		; Number of valid integers to get from user

 00000000			.data
 00000000 50 52 4F 47 52	prog_title			BYTE	"PROGRAMMING ASSIGNMENT 6: Designing low-level I/O procedures ",13,10,0
	   41 4D 4D 49 4E
	   47 20 41 53 53
	   49 47 4E 4D 45
	   4E 54 20 36 3A
	   20 44 65 73 69
	   67 6E 69 6E 67
	   20 6C 6F 77 2D
	   6C 65 76 65 6C
	   20 49 2F 4F 20
	   70 72 6F 63 65
	   64 75 72 65 73
	   20 0D 0A 00
 00000040 57 72 69 74 74	author				BYTE	"Written by: Eva Malpaya ",13,10,0
	   65 6E 20 62 79
	   3A 20 45 76 61
	   20 4D 61 6C 70
	   61 79 61 20 0D
	   0A 00
				;ec_1				BYTE	"**EC: Program aligns the output columns.",13,10,0	; ec = extra credit
 0000005B 0D 0A 50 6C 65	prompt_intro		BYTE	13,10,"Please provide 10 signed decimal integers. ",13,10
	   61 73 65 20 70
	   72 6F 76 69 64
	   65 20 31 30 20
	   73 69 67 6E 65
	   64 20 64 65 63
	   69 6D 61 6C 20
	   69 6E 74 65 67
	   65 72 73 2E 20
	   0D 0A
 0000008A  45 61 63 68 20						BYTE	"Each number needs to be small enough to fit inside a 32 bit register. ",13,10
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 62 65 20 73
	   6D 61 6C 6C 20
	   65 6E 6F 75 67
	   68 20 74 6F 20
	   66 69 74 20 69
	   6E 73 69 64 65
	   20 61 20 33 32
	   20 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 20
	   0D 0A
 000000D2  41 66 74 65 72						BYTE	"After you have finished inputting the raw numbers I will display ",13,10
	   20 79 6F 75 20
	   68 61 76 65 20
	   66 69 6E 69 73
	   68 65 64 20 69
	   6E 70 75 74 74
	   69 6E 67 20 74
	   68 65 20 72 61
	   77 20 6E 75 6D
	   62 65 72 73 20
	   49 20 77 69 6C
	   6C 20 64 69 73
	   70 6C 61 79 20
	   0D 0A
 00000115  61 20 6C 69 73						BYTE	"a list of the integers, their sum, and their average value. ",13,10,13,10,0
	   74 20 6F 66 20
	   74 68 65 20 69
	   6E 74 65 67 65
	   72 73 2C 20 74
	   68 65 69 72 20
	   73 75 6D 2C 20
	   61 6E 64 20 74
	   68 65 69 72 20
	   61 76 65 72 61
	   67 65 20 76 61
	   6C 75 65 2E 20
	   0D 0A 0D 0A 00
 00000156 50 6C 65 61 73	prompt				BYTE	"Please enter a signed number:  ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   20 00
 00000176 45 52 52 4F 52	error				BYTE	"ERROR: You did not enter an signed number or your number was too big. ",13,10,0
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 6E 20 73 69
	   67 6E 65 64 20
	   6E 75 6D 62 65
	   72 20 6F 72 20
	   79 6F 75 72 20
	   6E 75 6D 62 65
	   72 20 77 61 73
	   20 74 6F 6F 20
	   62 69 67 2E 20
	   0D 0A 00
 000001BF 50 6C 65 61 73	prompt_again		BYTE	"Please try again: ",0
	   65 20 74 72 79
	   20 61 67 61 69
	   6E 3A 20 00
 000001D2 0D 0A 59 6F 75	display				BYTE	13,10,"You entered the following numbers: ",13,10,0
	   20 65 6E 74 65
	   72 65 64 20 74
	   68 65 20 66 6F
	   6C 6C 6F 77 69
	   6E 67 20 6E 75
	   6D 62 65 72 73
	   3A 20 0D 0A 00
 000001FA 54 68 65 20 73	display_sum			BYTE	"The sum of these numbers is: ",13,10,0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 0D
	   0A 00
 0000021A 54 68 65 20 72	display_avg			BYTE	"The rounded average is: ",13,10,0
	   6F 75 6E 64 65
	   64 20 61 76 65
	   72 61 67 65 20
	   69 73 3A 20 0D
	   0A 00
 00000235 0D 0A 54 68 61	goodbye				BYTE	13,10,"Thanks for playing!  ",0
	   6E 6B 73 20 66
	   6F 72 20 70 6C
	   61 79 69 6E 67
	   21 20 20 00
 0000024D  0000000A [		array				DWORD	ARRAYSIZE DUP(?)
	    00000000
	   ]
 00000275 00			userInput			BYTE	?
 00000276 00000000		bytesRead			DWORD	0

 00000000			.code
 00000000			main PROC
					; Introduce the program
 00000000  68 00000000 R		PUSH	OFFSET prog_title
 00000005  68 00000040 R		PUSH	OFFSET author
 0000000A  E8 0000003F			CALL	introduction

					; Get 10 valid integers from the user
 0000000F  68 00000176 R		PUSH	OFFSET error		;40
 00000014  FF 35 0000024D R		PUSH	array				;36
 0000001A  68 00000275 R		PUSH	OFFSET userInput	;32
 0000001F  FF 35 00000276 R		PUSH	bytesRead			;28
 00000025  6A 1F			PUSH	COUNT				;24
 00000027  6A 0A			PUSH	ARRAYSIZE			;20
 00000029  68 0000005B R		PUSH	OFFSET prompt_intro	;16
 0000002E  68 00000156 R		PUSH	OFFSET prompt		;12
 00000033  68 000001BF R		PUSH	OFFSET prompt_again	;8
 00000038  E8 0000002C			CALL	getNumbers


					; Store these numeric values in an array


					; Calculate the sum


					; Calculate the average


					; Display the integers, their sum, and their average
					;mDisplayString display


					; Say goodbye
 0000003D  68 00000235 R		PUSH	OFFSET goodbye
 00000042  E8 0000010D			CALL	farewell

					Invoke ExitProcess,0	; exit to operating system
 00000047  6A 00	   *	    push   +000000000h
 00000049  E8 00000000 E   *	    call   ExitProcess
 0000004E			main ENDP

				;--------------------------------------
				; Introduces the program title and programmer's name, introduces
				; the program itself, and displays the extra credit print statements 
				; (if necessary).
				; preconditions:	intro1, intro2 are strings
				; postconditions:	
				; receives:			intro1, intro2
				; returns:			none
				;--------------------------------------
 0000004E			introduction PROC
 0000004E  55				PUSH	EBP
 0000004F  8B EC			MOV		EBP, ESP
					; preserve registers	

					; Introduce the program title
					mDisplayString [EBP+12]
 00000051  52		     1		PUSH	EDX
 00000052  8B 55 0C	     1		MOV		EDX, [EBP+12]
 00000055  E8 00000000 E     1		CALL	WriteString
 0000005A  5A		     1		POP		EDX

					; Introduce the programmer's name
					mDisplayString [EBP+8]
 0000005B  52		     1		PUSH	EDX
 0000005C  8B 55 08	     1		MOV		EDX, [EBP+8]
 0000005F  E8 00000000 E     1		CALL	WriteString
 00000064  5A		     1		POP		EDX

					; Display the extra credit print statements 

					; restore registers
 00000065  5D				POP		EBP
 00000066  C2 0008			RET		8
 00000069			introduction ENDP

				;--------------------------------------
				; 
				; (if necessary).
				; preconditions:	
				; postconditions:	
				; receives:			
				; returns:			
				;--------------------------------------
 00000069			getNumbers PROC
 00000069  55				PUSH	EBP
 0000006A  8B EC			MOV		EBP, ESP
					; preserve registers	
 0000006C  51	PUSH	ECX

					; Display the prompt intro
					mDisplayString [EBP+16]	;prompt_intro
 0000006D  52		     1		PUSH	EDX
 0000006E  8B 55 10	     1		MOV		EDX, [EBP+16]
 00000071  E8 00000000 E     1		CALL	WriteString
 00000076  5A		     1		POP		EDX

					; Get 10 valid integers from the user.
 00000077  8B 4D 14			MOV		ECX, [EBP+20]	;ARRAYSIZE
 0000007A			_fillLoop:
 0000007A  51				PUSH	ECX
 0000007B  FF 75 28			PUSH	[EBP+40]		;24	;error
 0000007E  FF 75 0C			PUSH	[EBP+12]		;20	;prompt
 00000081  FF 75 18			PUSH	[EBP+24]		;16	;COUNT
 00000084  FF 75 20			PUSH	[EBP+32]		;12	;userInput
 00000087  FF 75 1C			PUSH	[EBP+28]		;8	;bytesRead
 0000008A  E8 00000008			CALL	ReadVal
 0000008F  59				POP		ECX
 00000090  E2 E8			LOOP	_fillLoop
					

					; restore registers
 00000092  59				POP		ECX
 00000093  5D				POP		EBP
 00000094  C2 0028			RET		40
 00000097			getNumbers ENDP

				;--------------------------------------
				; 
				; (if necessary).
				; preconditions:	
				; postconditions:	
				; receives:			
				; returns:			
				;--------------------------------------
 00000097			ReadVal PROC
					; Create local variables
					LOCAL	isValid:	DWORD	; bool for character validation

					; Handled by LOCAL dir
					;PUSH	EBP
					;MOV		EBP, ESP
					
					; preserve registers	
 00000097  55		   *	    push   ebp
 00000098  8B EC	   *	    mov    ebp, esp
 0000009A  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 0000009D  50				PUSH	EAX		
 0000009E  53				PUSH	EBX		
 0000009F  51				PUSH	ECX
 000000A0  52				PUSH	EDX

					; initialize local variables
 000000A1  C7 45 FC			MOV		isValid, 1
	   00000001

 000000A8			_startLoop:
					; Invoke myGetString macro to get user input in form of string of digits
					;prompt, userInput, count, bytesRead
					mGetString [EBP+20], [EBP+12], [EBP+16], [EBP+8]
 000000A8  52		     2		PUSH	EDX
 000000A9  8B 55 14	     2		MOV		EDX, [EBP+20]
 000000AC  E8 00000000 E     2		CALL	WriteString
 000000B1  5A		     2		POP		EDX
 000000B2  8B 55 0C	     1		MOV		EDX, [EBP+12]
 000000B5  8B 4D 10	     1		MOV		ECX, [EBP+16]
 000000B8  E8 00000000 E     1		CALL	ReadString
 000000BD  89 55 0C	     1		MOV		[EBP+12], EDX
 000000C0  89 45 08	     1		MOV		[EBP+8], EAX

					;PUSH	[isValid]				;16	
 000000C3  8D 7D FC			LEA		EDI, isValid
 000000C6  57				PUSH	EDI						;16
 000000C7  FF 75 08			PUSH	[EBP+8]					;12	;bytesRead
 000000CA  FF 75 0C			PUSH	[EBP+12]				;8	;userInput
 000000CD  E8 00000025			CALL	validate

					; if input is invalid, display error message
 000000D2  8B 45 FC			MOV		EAX, isValid
 000000D5  83 F8 00			CMP		EAX, 0
 000000D8  74 02			JE		_notifyInvalid

					; if this point is reached, string is valid; jump to end
 000000DA  EB 13			JMP		_stringIsValid

 000000DC			_notifyInvalid:
					mDisplayString [EBP+24]			;error
 000000DC  52		     1		PUSH	EDX
 000000DD  8B 55 18	     1		MOV		EDX, [EBP+24]
 000000E0  E8 00000000 E     1		CALL	WriteString
 000000E5  5A		     1		POP		EDX
 000000E6  C7 45 FC			MOV		isValid, 1				;reset checker
	   00000001
 000000ED  EB B9			JMP		_startLoop

 000000EF			_stringIsValid:

					; restore registers
 000000EF  5A				POP		EDX
 000000F0  59				POP		ECX
 000000F1  5B				POP		EBX
 000000F2  58				POP		EAX
					;POP		EBP					; Handled by LOCAL dir
 000000F3  C9		   *	    leave  
 000000F4  C2 0010			RET		16
 000000F7			ReadVal ENDP


				;--------------------------------------
				; 
				; (if necessary).
				; preconditions:	
				; postconditions:	
				; receives:			
				; returns:			
				;--------------------------------------
 000000F7			validate PROC
					; Create local variables
					LOCAL	index:	DWORD	; placeholder in string

					; Handled by LOCAL dir
					;PUSH	EBP
					;MOV		EBP, ESP

					; preserve registers
 000000F7  55		   *	    push   ebp
 000000F8  8B EC	   *	    mov    ebp, esp
 000000FA  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 000000FD  50				PUSH	EAX		
 000000FE  53				PUSH	EBX		
 000000FF  51				PUSH	ECX
 00000100  52				PUSH	EDX
 00000101  56				PUSH	ESI
 00000102  57				PUSH	EDI

					; initialize local variables
 00000103  C7 45 FC			MOV		index, 0
	   00000000

 0000010A  8B 4D 0C			MOV		ECX, [EBP+12]	; String length into ECX
 0000010D  41				INC		ECX				; Account for null-terminator
 0000010E  8B 75 08			MOV		ESI, [EBP+8]	; Address of string into ESI


 00000111			_validateLoop:	
 00000111  AC				LODSB	; Puts byte in AL

					; check if signed
 00000112  50				PUSH	EAX				; preserve AL before first char check

 00000113  8B 45 FC			MOV		EAX, index
 00000116  83 F8 00			CMP		EAX, 0
 00000119  74 02			JE		_checkSign
 0000011B  EB 0B			JMP		_checkNumber


					; check first character if it's not a number
 0000011D			_checkSign:
 0000011D  58				POP		EAX				; restore AL before first char check

					; check if plus sign
 0000011E  3C 2B			CMP		AL, 43			;+
 00000120  74 15			JE		_isValidChar

					; check if negative sign
 00000122  3C 2D			CMP		AL, 45			;-
 00000124  74 11			JE		_isValidChar
 00000126  EB 01			JMP		_continueCheck

					; check if characters are numbers
 00000128			_checkNumber:
 00000128  58				POP		EAX				; restore AL before first char check

 00000129			_continueCheck:
					; check if end of string
 00000129  3C 00			CMP		AL, 0
 0000012B  74 1C			JE		_endOfString

 0000012D  3C 30			CMP		AL, 48			;0
 0000012F  7C 0E			JL		_invalidChar
 00000131  3C 39			CMP		AL, 57			;9
 00000133  7F 0A			JG		_invalidChar
 00000135  EB 00			JMP		_isValidChar

 00000137			_isValidChar:
 00000137  FF 45 FC			INC		index
 0000013A  AA				STOSB
 0000013B  E2 D4			LOOP	_validateLoop
 0000013D  EB 0A			JMP		_endOfString

 0000013F			_invalidChar:
 0000013F  8B 7D 10			MOV		EDI, [EBP+16]
 00000142  B8 00000000			MOV		EAX, 0
 00000147  89 07			MOV		[EDI], EAX

					;LEA		EAX, [EBP+16]
					;MOV		EAX, 0

					;MOV		EAX, [EBP+16]
					;MOV		EAX, [EDI]
					;CALL	WriteDec

 00000149			_endOfString:
					; restore registers
 00000149  5F				POP		EDI
 0000014A  5E				POP		ESI
 0000014B  5A				POP		EDX
 0000014C  59				POP		ECX
 0000014D  5B				POP		EBX		
 0000014E  58				POP		EAX
					;POP		EBP			; Handled by LOCAL dir
 0000014F  C9		   *	    leave  
 00000150  C2 0010			RET		16
 00000153			validate ENDP


				;--------------------------------------
				; 
				;
				; preconditions:	
				; postconditions:	userInput (val)
				; receives:			
				; returns:			
				;--------------------------------------
 00000153			WriteVal PROC

					; Convert numeric SDWORD value to string of ascii digits


					; Invoke mDisplayString macro to print ascii rep of SDWORD value to output

 00000153  C3				RET
 00000154			WriteVal ENDP



				;--------------------------------------
				; Displays a parting message
				;
				; preconditions:	goodbye is a string that contains a farewell message
				; postconditions:	EDX changed changed but restored
				; receives:			goodbye
				; returns:			none; prints to terminal only
				;--------------------------------------
 00000154			farewell PROC
 00000154  55				PUSH	EBP
 00000155  8B EC			MOV		EBP, ESP
					; preserve registers
 00000157  52				PUSH	EDX

 00000158  8B 55 08			MOV		EDX, [EBP+8]
 0000015B  E8 00000000 E		CALL	WriteString

					; restore registers
 00000160  5A				POP		EDX
 00000161  5D				POP		EBP
 00000162  C3				RET
 00000163			farewell ENDP


				END main
Microsoft (R) Macro Assembler Version 14.24.28314.0	    03/14/21 13:44:09
<Project 6 - String Primitives and Macros      (Proj6_malpay  Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000027A Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000163 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000097 _TEXT	Length= 00000060 Public STDCALL
  isValid  . . . . . . . . . . .	DWord	 bp - 00000004
  _startLoop . . . . . . . . . .	L Near	 000000A8 _TEXT	
  _notifyInvalid . . . . . . . .	L Near	 000000DC _TEXT	
  _stringIsValid . . . . . . . .	L Near	 000000EF _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 00000153 _TEXT	Length= 00000001 Public STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
farewell . . . . . . . . . . . .	P Near	 00000154 _TEXT	Length= 0000000F Public STDCALL
getNumbers . . . . . . . . . . .	P Near	 00000069 _TEXT	Length= 0000002E Public STDCALL
  _fillLoop  . . . . . . . . . .	L Near	 0000007A _TEXT	
introduction . . . . . . . . . .	P Near	 0000004E _TEXT	Length= 0000001B Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000004E Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
validate . . . . . . . . . . . .	P Near	 000000F7 _TEXT	Length= 0000005C Public STDCALL
  index  . . . . . . . . . . . .	DWord	 bp - 00000004
  _validateLoop  . . . . . . . .	L Near	 00000111 _TEXT	
  _checkSign . . . . . . . . . .	L Near	 0000011D _TEXT	
  _checkNumber . . . . . . . . .	L Near	 00000128 _TEXT	
  _continueCheck . . . . . . . .	L Near	 00000129 _TEXT	
  _isValidChar . . . . . . . . .	L Near	 00000137 _TEXT	
  _invalidChar . . . . . . . . .	L Near	 0000013F _TEXT	
  _endOfString . . . . . . . . .	L Near	 00000149 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 0000000Ah   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
COUNT  . . . . . . . . . . . . .	Number	 0000001Fh   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
array  . . . . . . . . . . . . .	DWord	 0000024D _DATA	
author . . . . . . . . . . . . .	Byte	 00000040 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
bytesRead  . . . . . . . . . . .	DWord	 00000276 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
display_avg  . . . . . . . . . .	Byte	 0000021A _DATA	
display_sum  . . . . . . . . . .	Byte	 000001FA _DATA	
display  . . . . . . . . . . . .	Byte	 000001D2 _DATA	
error  . . . . . . . . . . . . .	Byte	 00000176 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 00000235 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
prog_title . . . . . . . . . . .	Byte	 00000000 _DATA	
prompt_again . . . . . . . . . .	Byte	 000001BF _DATA	
prompt_intro . . . . . . . . . .	Byte	 0000005B _DATA	
prompt . . . . . . . . . . . . .	Byte	 00000156 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
userInput  . . . . . . . . . . .	Byte	 00000275 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
