Microsoft (R) Macro Assembler Version 14.24.28314.0	    03/16/21 15:38:36
<Project 6 - String Primitives and Macros      (Proj6_malpay  Page 1 - 1


				TITLE Project 6 - String Primitives and Macros      (Proj6_malpayae.asm)

				; Author:	Eva Malpaya
				; Last Modified:	3/14/2021
				; OSU email address: malpayae@oregonstate.edu
				; Course number/section:   CS271 Section 401
				; Project Number:	6                Due Date:	3/14/2021
				; Description: This program prompts the user to enter numbers to be
				; entered into an array, validates the input, then displays the array.
				;
				; Note: 'array' and 'list' may be used interchangeably in my comments

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				;--------------------------------------
				; 
				; preconditions:	
				; postconditions:	
				; receives:			prompt, userInput, count, bytesRead
				; returns:			userInput, bytesRead updated
				;--------------------------------------
				;				[EBP+28], [EBP+12], [EBP+16], [EBP+8]
				mGetString MACRO mPrompt, mUserInput, mCount, mBytesRead
					; Display a prompt
					mDisplayString mPrompt

					; Get user's keyboard input into a memory location
					MOV		EDX, mUserInput
					MOV		ECX, mCount
					CALL	ReadString
					MOV		mUserInput, EDX
					MOV		mBytesRead, EAX

				ENDM


				;--------------------------------------
				; 
				; preconditions:	
				; postconditions:	
				; receives:			string (ref)
				; returns:			
				;--------------------------------------
				mDisplayString MACRO string
					PUSH	EDX
					MOV		EDX, string
					CALL	WriteString
					POP		EDX

				ENDM

				; Required constants
 = 00000020			COUNT =		32		; length of input string can accomodate
 = 0000000A			ARRAYSIZE = 10		; Number of valid integers to get from user
				;ARRAYSIZE = 1		; debug only

 00000000			.data
 00000000 50 52 4F 47 52	prog_title			BYTE	"PROGRAMMING ASSIGNMENT 6: Designing low-level I/O procedures ",13,10,0
	   41 4D 4D 49 4E
	   47 20 41 53 53
	   49 47 4E 4D 45
	   4E 54 20 36 3A
	   20 44 65 73 69
	   67 6E 69 6E 67
	   20 6C 6F 77 2D
	   6C 65 76 65 6C
	   20 49 2F 4F 20
	   70 72 6F 63 65
	   64 75 72 65 73
	   20 0D 0A 00
 00000040 57 72 69 74 74	author				BYTE	"Written by: Eva Malpaya ",13,10,0
	   65 6E 20 62 79
	   3A 20 45 76 61
	   20 4D 61 6C 70
	   61 79 61 20 0D
	   0A 00
				;ec_1				BYTE	"**EC: Program aligns the output columns.",13,10,0	; ec = extra credit
 0000005B 0D 0A 50 6C 65	prompt_intro		BYTE	13,10,"Please provide 10 signed decimal integers. ",13,10
	   61 73 65 20 70
	   72 6F 76 69 64
	   65 20 31 30 20
	   73 69 67 6E 65
	   64 20 64 65 63
	   69 6D 61 6C 20
	   69 6E 74 65 67
	   65 72 73 2E 20
	   0D 0A
 0000008A  45 61 63 68 20						BYTE	"Each number needs to be small enough to fit inside a 32 bit register. ",13,10
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 62 65 20 73
	   6D 61 6C 6C 20
	   65 6E 6F 75 67
	   68 20 74 6F 20
	   66 69 74 20 69
	   6E 73 69 64 65
	   20 61 20 33 32
	   20 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 20
	   0D 0A
 000000D2  41 66 74 65 72						BYTE	"After you have finished inputting the raw numbers I will display ",13,10
	   20 79 6F 75 20
	   68 61 76 65 20
	   66 69 6E 69 73
	   68 65 64 20 69
	   6E 70 75 74 74
	   69 6E 67 20 74
	   68 65 20 72 61
	   77 20 6E 75 6D
	   62 65 72 73 20
	   49 20 77 69 6C
	   6C 20 64 69 73
	   70 6C 61 79 20
	   0D 0A
 00000115  61 20 6C 69 73						BYTE	"a list of the integers, their sum, and their average value. ",13,10,13,10,0
	   74 20 6F 66 20
	   74 68 65 20 69
	   6E 74 65 67 65
	   72 73 2C 20 74
	   68 65 69 72 20
	   73 75 6D 2C 20
	   61 6E 64 20 74
	   68 65 69 72 20
	   61 76 65 72 61
	   67 65 20 76 61
	   6C 75 65 2E 20
	   0D 0A 0D 0A 00
 00000156 50 6C 65 61 73	prompt				BYTE	"Please enter a signed number:  ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   20 00
 00000176 45 52 52 4F 52	error				BYTE	"ERROR: You did not enter an signed number or your number was too big. ",13,10,0
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 6E 20 73 69
	   67 6E 65 64 20
	   6E 75 6D 62 65
	   72 20 6F 72 20
	   79 6F 75 72 20
	   6E 75 6D 62 65
	   72 20 77 61 73
	   20 74 6F 6F 20
	   62 69 67 2E 20
	   0D 0A 00
 000001BF 50 6C 65 61 73	prompt_again		BYTE	"Please try again: ",0
	   65 20 74 72 79
	   20 61 67 61 69
	   6E 3A 20 00
 000001D2 0D 0A 59 6F 75	display				BYTE	13,10,"You entered the following numbers: ",13,10,0
	   20 65 6E 74 65
	   72 65 64 20 74
	   68 65 20 66 6F
	   6C 6C 6F 77 69
	   6E 67 20 6E 75
	   6D 62 65 72 73
	   3A 20 0D 0A 00
 000001FA 54 68 65 20 73	display_sum			BYTE	"The sum of these numbers is: ",13,10,0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 0D
	   0A 00
 0000021A 54 68 65 20 72	display_avg			BYTE	"The rounded average is: ",13,10,0
	   6F 75 6E 64 65
	   64 20 61 76 65
	   72 61 67 65 20
	   69 73 3A 20 0D
	   0A 00
 00000235 0D 0A 54 68 61	goodbye				BYTE	13,10,"Thanks for playing!  ",0
	   6E 6B 73 20 66
	   6F 72 20 70 6C
	   61 79 69 6E 67
	   21 20 20 00
 0000024D 2C 20 00		list_delim			BYTE	", ",0
 00000250  0000000A [		array				SDWORD	ARRAYSIZE DUP(?)
	    00000000
	   ]
 00000278  0000000A [		userInput			BYTE	ARRAYSIZE DUP(33)
	    21
	   ]
 00000282 00000000		bytesRead			DWORD	0
 00000286 00000000		numInt				SDWORD	0	; the string converted to a number
 0000028A 00000000		sum					SDWORD	0
 0000028E 00000000		avg					SDWORD	0

 00000000			.code
 00000000			main PROC
					; Introduce the program
 00000000  68 00000000 R		PUSH	OFFSET prog_title
 00000005  68 00000040 R		PUSH	OFFSET author
 0000000A  E8 00000095			CALL	introduction

					; Get 10 valid integers from the user
 0000000F  8D 3D 00000286 R		LEA		EDI, numInt	
 00000015  57				PUSH	EDI					;44
 00000016  68 00000176 R		PUSH	OFFSET error		;40
 0000001B  68 00000250 R		PUSH	OFFSET array		;36
 00000020  68 00000278 R		PUSH	OFFSET userInput	;32
 00000025  FF 35 00000282 R		PUSH	bytesRead			;28
 0000002B  6A 20			PUSH	COUNT				;24
 0000002D  6A 0A			PUSH	ARRAYSIZE			;20
 0000002F  68 0000005B R		PUSH	OFFSET prompt_intro	;16
 00000034  68 00000156 R		PUSH	OFFSET prompt		;12
 00000039  68 000001BF R		PUSH	OFFSET prompt_again	;8
 0000003E  E8 0000007C			CALL	testProgram


					; Store these numeric values in an array


					; Calculate the sum
 00000043  FF 35 0000028A R		PUSH	sum					;16
 00000049  68 00000250 R		PUSH	OFFSET array		;12
 0000004E  6A 0A			PUSH	ARRAYSIZE			;8
 00000050  E8 000002CB			CALL	calculateSum


					; Calculate the average
 00000055  FF 35 0000028E R		PUSH	avg					;16
 0000005B  68 00000250 R		PUSH	OFFSET array		;12
 00000060  6A 0A			PUSH	ARRAYSIZE			;8
 00000062  E8 000002C0			CALL	calculateAvg
					


					; Display the integers, their sum, and their average
					;mDisplayString display
 00000067  68 0000024D R		PUSH	OFFSET list_delim	;36
 0000006C  68 000001D2 R		PUSH	OFFSET display		;32
 00000071  68 000001FA R		PUSH	OFFSET display_sum	;28
 00000076  68 0000021A R		PUSH	OFFSET display_avg	;24
 0000007B  68 00000250 R		PUSH	OFFSET array		;20
 00000080  6A 0A			PUSH	ARRAYSIZE			;16
 00000082  FF 35 0000028A R		PUSH	sum					;12	
 00000088  FF 35 0000028E R		PUSH	avg					;8
 0000008E  E8 000002CB			CALL	displayResults


					; Say goodbye
 00000093  68 00000235 R		PUSH	OFFSET goodbye
 00000098  E8 00000300			CALL	farewell

					Invoke ExitProcess,0	; exit to operating system
 0000009D  6A 00	   *	    push   +000000000h
 0000009F  E8 00000000 E   *	    call   ExitProcess
 000000A4			main ENDP

				;--------------------------------------
				; Introduces the program title and programmer's name, introduces
				; the program itself, and displays the extra credit print statements 
				; (if necessary).
				; preconditions:	intro1, intro2 are strings
				; postconditions:	
				; receives:			intro1, intro2
				; returns:			none
				;--------------------------------------
 000000A4			introduction PROC
 000000A4  55				PUSH	EBP
 000000A5  8B EC			MOV		EBP, ESP
					; preserve registers	

					; Introduce the program title
					mDisplayString [EBP+12]
 000000A7  52		     1		PUSH	EDX
 000000A8  8B 55 0C	     1		MOV		EDX, [EBP+12]
 000000AB  E8 00000000 E     1		CALL	WriteString
 000000B0  5A		     1		POP		EDX

					; Introduce the programmer's name
					mDisplayString [EBP+8]
 000000B1  52		     1		PUSH	EDX
 000000B2  8B 55 08	     1		MOV		EDX, [EBP+8]
 000000B5  E8 00000000 E     1		CALL	WriteString
 000000BA  5A		     1		POP		EDX

					; Display the extra credit print statements 

					; restore registers
 000000BB  5D				POP		EBP
 000000BC  C2 0008			RET		8
 000000BF			introduction ENDP

				;--------------------------------------
				; 
				; (if necessary).
				; preconditions:	
				; postconditions:	
				; receives:			
				; returns:			
				;--------------------------------------
 000000BF			testProgram PROC
 000000BF  55				PUSH	EBP
 000000C0  8B EC			MOV		EBP, ESP
					; preserve registers	
 000000C2  50				PUSH	EAX		
 000000C3  53				PUSH	EBX		
 000000C4  51				PUSH	ECX
 000000C5  52				PUSH	EDX
 000000C6  56				PUSH	ESI
 000000C7  57				PUSH	EDI

 000000C8  8B 4D 14			MOV		ECX, [EBP+20]	; array length into ECX
 000000CB  8B 7D 24			MOV		EDI, [EBP+36]	; Address of array into EDI

					; Display the prompt intro
					mDisplayString [EBP+16]	;prompt_intro
 000000CE  52		     1		PUSH	EDX
 000000CF  8B 55 10	     1		MOV		EDX, [EBP+16]
 000000D2  E8 00000000 E     1		CALL	WriteString
 000000D7  5A		     1		POP		EDX

					; Get 10 valid integers from the user.
 000000D8  8B 4D 14			MOV		ECX, [EBP+20]	;ARRAYSIZE
 000000DB			_fillLoop:
					;PUSH	ECX

 000000DB  FF 75 2C			PUSH	[EBP+44]		;32	;numInt
 000000DE  FF 75 08			PUSH	[EBP+8]			;28	;prompt_again
 000000E1  FF 75 28			PUSH	[EBP+40]		;24	;error
 000000E4  FF 75 0C			PUSH	[EBP+12]		;20	;prompt
 000000E7  FF 75 18			PUSH	[EBP+24]		;16	;COUNT
 000000EA  FF 75 20			PUSH	[EBP+32]		;12	;userInput
 000000ED  FF 75 1C			PUSH	[EBP+28]		;8	;bytesRead
 000000F0  E8 0000001D			CALL	ReadVal

					; debug only
					;MOV		EDI, [EBP+32]
					;MOV		EAX, [EDI]
					;CALL	WriteDec
					;CALL	CrLf

					;POP		ECX

					; move the validated value into the array
					;MOV		EDI, [EBP+36]	; Address of array into EDI
 000000F5  8B 75 2C			MOV		ESI, [EBP+44]	; address of numInt into ESI
 000000F8  8B 06			MOV		EAX, [ESI]		; numInt into EAX
					;CALL	WriteInt		; debug only
 000000FA  89 07			MOV		[EDI], EAX		; EAX into EDI
 000000FC  83 C7 04			ADD		EDI, 4			; Move into next spot in the array
 000000FF  B8 00000000			MOV		EAX, 0
 00000104  89 06			MOV		[ESI], EAX		; reset numInt to 0

 00000106  E2 D3			LOOP	_fillLoop
					

					; restore registers
 00000108  5F				POP		EDI
 00000109  5E				POP		ESI
 0000010A  5A				POP		EDX
 0000010B  59				POP		ECX
 0000010C  5B				POP		EBX		
 0000010D  58				POP		EAX
 0000010E  5D				POP		EBP
 0000010F  C2 0028			RET		40
 00000112			testProgram ENDP

				;--------------------------------------
				; 
				; (if necessary).
				; preconditions:	
				; postconditions:	
				; receives:			
				; returns:			-
				;--------------------------------------
 00000112			ReadVal PROC
					; Create local variables
					LOCAL	isValid:	DWORD	; bool for character validation
					LOCAL	isNegative:	DWORD

					; Handled by LOCAL dir
					;PUSH	EBP
					;MOV		EBP, ESP
					
					; preserve registers	
 00000112  55		   *	    push   ebp
 00000113  8B EC	   *	    mov    ebp, esp
 00000115  83 C4 F8	   *	    add    esp, 0FFFFFFF8h
 00000118  50				PUSH	EAX		
 00000119  53				PUSH	EBX		
 0000011A  51				PUSH	ECX
 0000011B  52				PUSH	EDX
 0000011C  56				PUSH	ESI
 0000011D  57				PUSH	EDI

					; initialize local variables
 0000011E  C7 45 FC			MOV		isValid, 1
	   00000001
 00000125  C7 45 F8			MOV		isNegative, 0
	   00000000

 0000012C			_startLoop:
					; Invoke myGetString macro to get user input in form of string of digits
					;prompt, userInput, count, bytesRead

 0000012C  8B 45 FC			MOV		EAX, isValid
 0000012F  83 F8 00			CMP		EAX, 0
 00000132  74 02			JE		_getStringAgain
 00000134  EB 1D			JMP		_getString

 00000136			_getStringAgain:
					mGetString [EBP+28], [EBP+12], [EBP+16], [EBP+8]
 00000136  52		     2		PUSH	EDX
 00000137  8B 55 1C	     2		MOV		EDX, [EBP+28]
 0000013A  E8 00000000 E     2		CALL	WriteString
 0000013F  5A		     2		POP		EDX
 00000140  8B 55 0C	     1		MOV		EDX, [EBP+12]
 00000143  8B 4D 10	     1		MOV		ECX, [EBP+16]
 00000146  E8 00000000 E     1		CALL	ReadString
 0000014B  89 55 0C	     1		MOV		[EBP+12], EDX
 0000014E  89 45 08	     1		MOV		[EBP+8], EAX
 00000151  EB 28			JMP		_continueStartLoop
 00000153			_getString:
					mGetString [EBP+20], [EBP+12], [EBP+16], [EBP+8]
 00000153  52		     2		PUSH	EDX
 00000154  8B 55 14	     2		MOV		EDX, [EBP+20]
 00000157  E8 00000000 E     2		CALL	WriteString
 0000015C  5A		     2		POP		EDX
 0000015D  8B 55 0C	     1		MOV		EDX, [EBP+12]
 00000160  8B 4D 10	     1		MOV		ECX, [EBP+16]
 00000163  E8 00000000 E     1		CALL	ReadString
 00000168  89 55 0C	     1		MOV		[EBP+12], EDX
 0000016B  89 45 08	     1		MOV		[EBP+8], EAX

					;;;;;;debug
						; Display a prompt
					;mDisplayString [EBP+20]

					; Get user's keyboard input into a memory location
					;MOV		EDX, [EBP+12]
					;MOV		ECX, [EBP+16]
					;CALL	ReadString
					;MOV		[EBP+12], EDX
					;MOV		[EBP+8], EAX
					;;;;;;end debug

					; if string is too large, automatically set as invalid
 0000016E  8B 45 08			MOV		EAX, [EBP+8]
 00000171  83 F8 04			CMP		EAX, 4
 00000174  7F 1E			JG		_sizeInvalid
					; if string empty, automatically set as invalid
 00000176  83 F8 00			CMP		EAX, 0
 00000179  74 19			JE		_sizeInvalid


 0000017B			_continueStartLoop:
					;PUSH	[isValid]				;16	
 0000017B  8D 7D FC			LEA		EDI, isValid
 0000017E  57				PUSH	EDI						;16
 0000017F  FF 75 08			PUSH	[EBP+8]					;12	;bytesRead
 00000182  FF 75 0C			PUSH	[EBP+12]				;8	;userInput
 00000185  E8 00000088			CALL	validate

					; if input is invalid, display error message
 0000018A  8B 45 FC			MOV		EAX, isValid
 0000018D  83 F8 00			CMP		EAX, 0
 00000190  74 09			JE		_notifyInvalid

					; if this point is reached, string is valid
 00000192  EB 13			JMP		_stringIsValid

 00000194			_sizeInvalid:
 00000194  C7 45 FC			MOV		isValid, 0
	   00000000
 0000019B			_notifyInvalid:
					mDisplayString [EBP+24]			;error
 0000019B  52		     1		PUSH	EDX
 0000019C  8B 55 18	     1		MOV		EDX, [EBP+24]
 0000019F  E8 00000000 E     1		CALL	WriteString
 000001A4  5A		     1		POP		EDX
					;MOV		isValid, 1				;reset checker

					; reset userInput
					;PUSH	[EBP+8]					;12	;bytesRead
					;PUSH	[EBP+12]				;8	;userInput
					;CALL	resetString

 000001A5  EB 85			JMP		_startLoop

 000001A7			_stringIsValid:

				; convert to SDWORD
 000001A7  8B 4D 08			MOV		ECX, [EBP+8]	; String length into ECX
					;INC		ECX			; Account for null-terminator
 000001AA  8B 75 0C			MOV		ESI, [EBP+12]	; Address of userInput into ESI

 000001AD  8B 7D 20			MOV		EDI, [EBP+32]	; numInt
 000001B0  B8 00000000			MOV		EAX, 0
 000001B5  89 07			MOV		[EDI], EAX
					;MOV		EAX, 1
					;MOV		[EDI], EAX
					
 000001B7			_convertLoop:				; For numChar in numString
 000001B7  AC				LODSB	; Puts byte in AL

					; check if signed
					;PUSH	EAX				; preserve AL before first char check

					;MOV		EAX, ECX
					;CMP		EAX, 0
					;JE		_potentialSign
					;JMP		_isNumber


					; check first character if it's not a number
 000001B8			_potentialSign:
					;POP		EAX				; restore AL before first char check

					; check if plus sign
 000001B8  3C 2B			CMP		AL, 43			;+
 000001BA  74 1E			JE		_continueConvert

					; check if negative sign
 000001BC  3C 2D			CMP		AL, 45			;-
 000001BE  74 02			JE		_isNeg
 000001C0  EB 0A			JMP		_startConvert

 000001C2			_isNeg:
 000001C2  C7 45 F8			MOV		isNegative, 1
	   00000001
 000001C9  EB 0F			JMP		_continueConvert

					; check if characters are numbers
 000001CB			_isNumber:
 000001CB  58				POP		EAX				; restore AL before first char check

					; confirmed not trying to convert a sign character at this point1
 000001CC			_startConvert:
					; do something with AL
 000001CC  2C 30			SUB		AL, 48
 000001CE  0F BE D8			MOVSX	EBX, AL

 000001D1  8B 07			MOV		EAX, [EDI]		; move numInt into EAX
 000001D3  6B C0 0A			IMUL	EAX, 10			; multiply numInt by 10

 000001D6  03 C3			ADD		EAX, EBX		; Add these two together to update numInt
 000001D8  89 07			MOV		[EDI], EAX		; store resulting integer in numInt
 000001DA			_continueConvert:
 000001DA  E2 DB			LOOP	_convertLoop	; repeat for length of string

 000001DC  83 7D F8 01			CMP		isNegative, 1
 000001E0  74 02			JE		_makeNeg
 000001E2  EB 07			JMP		_endReadVal

 000001E4			_makeNeg:
 000001E4  8B 07			MOV		EAX, [EDI]
 000001E6  6B C0 FF			IMUL	EAX, -1
 000001E9  89 07			MOV		[EDI], EAX		; store resulting integer in numInt

					;MOV		EAX, [EDI]		; mov numInt into EAX
					;MOV		ESI, [EBP+12]	; mov userInput into ESI
					;MOV		[ESI], EAX		; mov numInt into userInput? Why?

					; reset userInput
					;PUSH	[EBP+8]					;12	;bytesRead
					;PUSH	[EBP+12]				;8	;userInput
					;CALL	resetString

 000001EB			_endReadVal:	
					; restore registers
 000001EB  5F				POP		EDI
 000001EC  5E				POP		ESI
 000001ED  5A				POP		EDX
 000001EE  59				POP		ECX
 000001EF  5B				POP		EBX		
 000001F0  58				POP		EAX
					;POP		EBP					; Handled by LOCAL dir
 000001F1  C9		   *	    leave  
 000001F2  C2 001C			RET		28
 000001F5			ReadVal ENDP

				;--------------------------------------
				; 
				; (if necessary).
				; preconditions:	
				; postconditions:	
				; receives:			aString, stringLength,
				; returns:			
				;--------------------------------------
 000001F5			resetString PROC
 000001F5  55				PUSH	EBP
 000001F6  8B EC			MOV		EBP, ESP

					; preserve registers
 000001F8  50				PUSH	EAX		
 000001F9  53				PUSH	EBX		
 000001FA  51				PUSH	ECX
 000001FB  52				PUSH	EDX
 000001FC  56				PUSH	ESI
 000001FD  57				PUSH	EDI

 000001FE  B0 00			MOV		AL, 0
 00000200  8B 7D 08			MOV		EDI, [EBP+8]		; aString
 00000203  8B 4D 0C			MOV		ECX, [EBP+12]		; stringLength
 00000206  F3/ AA			REP		STOSB
				;_resetLoop:
					;STOSB						; move 0 from AL into userInpug
					;REP
					;LOOP	_resetLoop


					; restore registers
 00000208  5F				POP		EDI
 00000209  5E				POP		ESI
 0000020A  5A				POP		EDX
 0000020B  59				POP		ECX
 0000020C  5B				POP		EBX		
 0000020D  58				POP		EAX
 0000020E  5D				POP		EBP			; Handled by LOCAL dir
 0000020F  C2 0008			RET		8
 00000212			resetString ENDP


				;--------------------------------------
				; 
				; (if necessary).
				; preconditions:	
				; postconditions:	
				; receives:			
				; returns:			
				;--------------------------------------
 00000212			validate PROC
					; Create local variables
					LOCAL	index:	DWORD	; placeholder in string

					; Handled by LOCAL dir
					;PUSH	EBP
					;MOV		EBP, ESP

					; preserve registers
 00000212  55		   *	    push   ebp
 00000213  8B EC	   *	    mov    ebp, esp
 00000215  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 00000218  50				PUSH	EAX		
 00000219  53				PUSH	EBX		
 0000021A  51				PUSH	ECX
 0000021B  52				PUSH	EDX
 0000021C  56				PUSH	ESI
 0000021D  57				PUSH	EDI

					; initialize local variables
 0000021E  C7 45 FC			MOV		index, 0
	   00000000

 00000225  8B 4D 0C			MOV		ECX, [EBP+12]	; String length into ECX
 00000228  41				INC		ECX				; Account for null-terminator
 00000229  8B 75 08			MOV		ESI, [EBP+8]	; Address of string into ESI

 0000022C  8B 7D 10			MOV		EDI, [EBP+16]	; Reset bool value
 0000022F  B8 00000001			MOV		EAX, 1
 00000234  89 07			MOV		[EDI], EAX


 00000236			_validateLoop:	
 00000236  AC				LODSB	; Puts byte in AL

					; check if signed
 00000237  50				PUSH	EAX				; preserve AL before first char check

 00000238  8B 45 FC			MOV		EAX, index
 0000023B  83 F8 00			CMP		EAX, 0
 0000023E  74 02			JE		_checkSign
 00000240  EB 0B			JMP		_checkNumber


					; check first character if it's not a number
 00000242			_checkSign:
 00000242  58				POP		EAX				; restore AL before first char check

					; check if plus sign
 00000243  3C 2B			CMP		AL, 43			;+
 00000245  74 15			JE		_isValidChar

					; check if negative sign
 00000247  3C 2D			CMP		AL, 45			;-
 00000249  74 11			JE		_isValidChar
 0000024B  EB 01			JMP		_continueCheck

					; check if characters are numbers
 0000024D			_checkNumber:
 0000024D  58				POP		EAX				; restore AL before first char check

 0000024E			_continueCheck:
					; check if end of string
 0000024E  3C 00			CMP		AL, 0
 00000250  74 24			JE		_endOfString

 00000252  3C 30			CMP		AL, 48			;0
 00000254  7C 0E			JL		_invalidChar
 00000256  3C 39			CMP		AL, 57			;9
 00000258  7F 0A			JG		_invalidChar
 0000025A  EB 00			JMP		_isValidChar

 0000025C			_isValidChar:
 0000025C  FF 45 FC			INC		index
 0000025F  AA				STOSB
 00000260  E2 D4			LOOP	_validateLoop
 00000262  EB 12			JMP		_endOfString

 00000264			_invalidChar:
 00000264  8B 7D 10			MOV		EDI, [EBP+16]
 00000267  B8 00000000			MOV		EAX, 0
 0000026C  89 07			MOV		[EDI], EAX

 0000026E  8B 55 10			MOV		EDX, [EBP+16]
 00000271  E8 00000000 E		CALL	WriteDec

					;LEA		EAX, [EBP+16]
					;MOV		EAX, 0

					;MOV		EAX, [EBP+16]
					;MOV		EAX, [EDI]
					;CALL	WriteDec

 00000276			_endOfString:
					; restore registers
 00000276  5F				POP		EDI
 00000277  5E				POP		ESI
 00000278  5A				POP		EDX
 00000279  59				POP		ECX
 0000027A  5B				POP		EBX		
 0000027B  58				POP		EAX
					;POP		EBP			; Handled by LOCAL dir
 0000027C  C9		   *	    leave  
 0000027D  C2 000C			RET		12
 00000280			validate ENDP


				;--------------------------------------
				; 
				;
				; preconditions:	
				; postconditions:	userInput (val)
				; receives:			
				; returns:			
				;--------------------------------------
 00000280			WriteVal PROC
					; Create local variables
					LOCAL	string[33]:	BYTE	; placeholder in string
					LOCAL	reverseString[33]: BYTE	;placeholder for reversed string
					LOCAL	number: DWORD	; placeholder for number
					LOCAL	byteCounter: DWORD

					; Handled by LOCAL dir
					;PUSH	EBP
					;MOV		EBP, ESP

					; preserve registers
 00000280  55		   *	    push   ebp
 00000281  8B EC	   *	    mov    ebp, esp
 00000283  83 C4 B4	   *	    add    esp, 0FFFFFFB4h
 00000286  50				PUSH	EAX		
 00000287  53				PUSH	EBX		
 00000288  51				PUSH	ECX
 00000289  52				PUSH	EDX
 0000028A  56				PUSH	ESI
 0000028B  57				PUSH	EDI

 0000028C  C7 45 B4			MOV		byteCounter, 0
	   00000000

					; Convert numeric SDWORD value to string of ascii digits
 00000293  B8 00000000			MOV		EAX, 0
 00000298  8B 45 08			MOV		EAX, [EBP+8]	
 0000029B  89 45 B8			MOV		number, EAX

					; Prep local variable to hold the converted string
					;MOV		EAX, OFFSET string
					;MOV		EDI, EAX
					;XOR		EDI, EDI
 0000029E  8D 7D DF			LEA			EDI, string


 000002A1			_startNumberConversion:
 000002A1  B9 00000063			MOV		ECX, 99
 000002A6  8B 45 B8			MOV		EAX, number		; divide by 10
 000002A9  83 F8 00			CMP		EAX, 0
 000002AC  7C 02			JL		_negNegative
 000002AE  EB 02			JMP		_isANumberLoop

 000002B0			_negNegative:
 000002B0  F7 D8			NEG		EAX

					; not sign character at this point
 000002B2			_isANumberLoop:
 000002B2  BB 0000000A			MOV		EBX, 10
 000002B7  99				CDQ
 000002B8  F7 FB			IDIV	EBX

					;PUSH	EAX				; save quotient for next character
 000002BA  8B D8			MOV		EBX, EAX

 000002BC  8B C2			MOV		EAX, EDX
 000002BE  83 C0 30			ADD		EAX, 48			; add 48 
					;MOV		AL, AX		; add to string
 000002C1  AA				STOSB				
 000002C2  FF 45 B4			INC		byteCounter
					;LEA		EDX, string			; debug only
					;CALL	WriteString			; debug only
					;POP		EAX				; restore quotient
 000002C5  8B C3			MOV		EAX, EBX

 000002C7  83 F8 00			CMP		EAX, 0
 000002CA  74 02			JE		_noMoreLoops
 000002CC  EB 05			JMP		_continueIsANumber

 000002CE			_noMoreLoops:
 000002CE  B9 00000001			MOV		ECX, 1

 000002D3			_continueIsANumber:
 000002D3  E2 DD			LOOP	_isANumberLoop


					; check sign
 000002D5  8B 45 B8			MOV		EAX, number
 000002D8  83 F8 00			CMP		EAX, 0
 000002DB  7D 02			JGE		_isPositive
 000002DD  EB 08			JMP		_isNegative

 000002DF			_isPositive:
 000002DF  B0 2B			MOV		AL, 43			;+
 000002E1  AA				STOSB
 000002E2  FF 45 B4			INC		byteCounter
					;LEA		EDX, string			; debug only
					;CALL	WriteString			; debug only
 000002E5  EB 06			JMP		_addNullTerminator

 000002E7			_isNegative:
 000002E7  B0 2D			MOV		AL, 45			;-
					;LEA		EDX, string			; debug only
					;CALL	WriteString			; debug only
 000002E9  AA				STOSB
 000002EA  FF 45 B4			INC		byteCounter

 000002ED			_addNullTerminator:
					; add null-terminator
 000002ED  B0 00			MOV		AL, 0
 000002EF  AA				STOSB
 000002F0  FF 45 B4			INC		byteCounter

					; reverse the string
					; Adapted from StringManipulator.asm demo video (retrieved March 2021):
 000002F3  8B 4D B4			  MOV	ECX, byteCounter
 000002F6  8D 75 DF			  LEA	ESI, string
 000002F9  03 F1			  ADD	ESI, ECX
 000002FB  49				  DEC	ECX
 000002FC  4E				  DEC	ESI
 000002FD  4E				  DEC	ESI
 000002FE  8D 7D BE			  LEA	EDI, reverseString

					; Reverse string
 00000301			_revLoop:
 00000301  FD				STD
 00000302  AC				LODSB
 00000303  FC				CLD
 00000304  AA				STOSB
 00000305  E2 FA			LOOP	_revLoop

					; add null-terminator
 00000307  B0 00			MOV		AL, 0
 00000309  AA				STOSB

					; print the ascii representation
 0000030A  8D 55 BE			LEA		EDX, reverseString			; debug only
					;CALL	WriteString			; debug only
					mDisplayString EDX
 0000030D  52		     1		PUSH	EDX
 0000030E  8B D2	     1		MOV		EDX, EDX
 00000310  E8 00000000 E     1		CALL	WriteString
 00000315  5A		     1		POP		EDX

					; debug only
					;LEA		EDX, string			; debug only
					;CALL	WriteString			; debug only
					;mDisplayString EDX


 00000316			_endOfWriteVal:
					; restore registers
 00000316  5F				POP		EDI
 00000317  5E				POP		ESI
 00000318  5A				POP		EDX
 00000319  59				POP		ECX
 0000031A  5B				POP		EBX		
 0000031B  58				POP		EAX
					;POP		EBP			; Handled by LOCAL dir
 0000031C  C9		   *	    leave  
 0000031D  C2 0004			RET		4
 00000320			WriteVal ENDP

				;--------------------------------------
				; 
				; (if necessary).
				; preconditions:	
				; postconditions:	
				; receives:			
				; returns:			
				;--------------------------------------
 00000320			calculateSum PROC
 00000320  55				PUSH	EBP
 00000321  8B EC			MOV		EBP, ESP
					; preserve registers	


					; restore registers
 00000323  5D				POP		EBP
 00000324  C2 000C			RET		12
 00000327			calculateSum ENDP

				;--------------------------------------
				; 
				; (if necessary).
				; preconditions:	
				; postconditions:	
				; receives:			
				; returns:			
				;--------------------------------------
 00000327			calculateAvg PROC
 00000327  55				PUSH	EBP
 00000328  8B EC			MOV		EBP, ESP
					; preserve registers	


					; restore registers
 0000032A  5D				POP		EBP
 0000032B  C2 000C			RET		12
 0000032E			calculateAvg ENDP

				;--------------------------------------
				; Traverses an array and prints out its values with a space
				; in-between each number.
				;
				; preconditions:	someArray is a DWORD array the size of ARRAYSIZE,
				;					ARRAYSIZE is the size of the array,
				;					someTitle contains a string
				; postconditions:	EAX, EBX, ECX, EDX changed but restored
				; receives:			someTitle, someArray, ARRAYSIZE 
				; returns:			none; output to terminal only
				;--------------------------------------
 0000032E			printArray PROC
 0000032E  55				PUSH	EBP
 0000032F  8B EC			MOV		EBP, ESP

					; preserve registers
 00000331  50				PUSH	EAX		
 00000332  53				PUSH	EBX		
 00000333  51				PUSH	ECX
 00000334  52				PUSH	EDX
 00000335  56				PUSH	ESI
 00000336  57				PUSH	EDI

					; Access the list
 00000337  8B 4D 08			MOV		ECX, [EBP+8]	; List length into ECX
 0000033A  8B 75 0C			MOV		ESI, [EBP+12]	; Address of list into EDI


					; traverse the list and print each number
					; with a space in-between. Prints new line
					; every 20 numbers
 0000033D			_displayLoop:
 0000033D  8B 06			MOV		EAX, [ESI]		; Print out a number in the list
					;CALL	WriteInt		; debug only
 0000033F  50				PUSH	EAX				;8
					;CALL	WriteInt		; debug only
 00000340  E8 FFFFFF3B			CALL	WriteVal

					;MOV		AL, 44
					;STOSB
					;MOV		EDX, [EBP+16]
					mDisplayString [EBP+16]		; print out a comma ;44
 00000345  52		     1		PUSH	EDX
 00000346  8B 55 10	     1		MOV		EDX, [EBP+16]
 00000349  E8 00000000 E     1		CALL	WriteString
 0000034E  5A		     1		POP		EDX
					;MOV		AL, 32
					;LEA		EDI, EAX
					;mDisplayString EDI		; print out a space ;32

 0000034F  83 C6 04			ADD		ESI, 4			; Move to the next element in list
 00000352  E2 E9			LOOP	_displayLoop

					; restore registers
 00000354  5F				POP		EDI
 00000355  5E				POP		ESI
 00000356  5A				POP		EDX
 00000357  59				POP		ECX
 00000358  5B				POP		EBX		
 00000359  58				POP		EAX
 0000035A  5D				POP		EBP			
 0000035B  C2 000C			RET		12
 0000035E			printArray ENDP


				;--------------------------------------
				; 
				; (if necessary).
				; preconditions:	
				; postconditions:	
				; receives:			
				; returns:			
				;--------------------------------------
 0000035E			displayResults PROC
 0000035E  55				PUSH	EBP
 0000035F  8B EC			MOV		EBP, ESP
					; preserve registers	
 00000361  50				PUSH	EAX		
 00000362  53				PUSH	EBX		
 00000363  51				PUSH	ECX
 00000364  52				PUSH	EDX
 00000365  56				PUSH	ESI
 00000366  57				PUSH	EDI

					; Display the integers
					mDisplayString [EBP+32]
 00000367  52		     1		PUSH	EDX
 00000368  8B 55 20	     1		MOV		EDX, [EBP+32]
 0000036B  E8 00000000 E     1		CALL	WriteString
 00000370  5A		     1		POP		EDX
 00000371  FF 75 24			PUSH	[EBP+36]	;16	;list_delim
 00000374  FF 75 14			PUSH	[EBP+20]	;12	;array
 00000377  FF 75 10			PUSH	[EBP+16]	;8	;ARRAYSIZE
 0000037A  E8 FFFFFFAF			CALL	printArray


					; Display the sum
					mDisplayString [EBP+28]
 0000037F  52		     1		PUSH	EDX
 00000380  8B 55 1C	     1		MOV		EDX, [EBP+28]
 00000383  E8 00000000 E     1		CALL	WriteString
 00000388  5A		     1		POP		EDX

					; Display the average
					mDisplayString [EBP+24]
 00000389  52		     1		PUSH	EDX
 0000038A  8B 55 18	     1		MOV		EDX, [EBP+24]
 0000038D  E8 00000000 E     1		CALL	WriteString
 00000392  5A		     1		POP		EDX

					; restore registers
 00000393  5F				POP		EDI
 00000394  5E				POP		ESI
 00000395  5A				POP		EDX
 00000396  59				POP		ECX
 00000397  5B				POP		EBX		
 00000398  58				POP		EAX
 00000399  5D				POP		EBP
 0000039A  C2 0020			RET		32
 0000039D			displayResults ENDP

				;--------------------------------------
				; Displays a parting message
				;
				; preconditions:	goodbye is a string that contains a farewell message
				; postconditions:	EDX changed changed but restored
				; receives:			goodbye
				; returns:			none; prints to terminal only
				;--------------------------------------
 0000039D			farewell PROC
 0000039D  55				PUSH	EBP
 0000039E  8B EC			MOV		EBP, ESP
					; preserve registers
 000003A0  52				PUSH	EDX

 000003A1  8B 55 08			MOV		EDX, [EBP+8]
 000003A4  E8 00000000 E		CALL	WriteString

					; restore registers
 000003A9  5A				POP		EDX
 000003AA  5D				POP		EBP
 000003AB  C3				RET
 000003AC			farewell ENDP


				END main
Microsoft (R) Macro Assembler Version 14.24.28314.0	    03/16/21 15:38:36
<Project 6 - String Primitives and Macros      (Proj6_malpay  Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000292 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000003AC Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000112 _TEXT	Length= 000000E3 Public STDCALL
  isValid  . . . . . . . . . . .	DWord	 bp - 00000004
  isNegative . . . . . . . . . .	DWord	 bp - 00000008
  _startLoop . . . . . . . . . .	L Near	 0000012C _TEXT	
  _getStringAgain  . . . . . . .	L Near	 00000136 _TEXT	
  _getString . . . . . . . . . .	L Near	 00000153 _TEXT	
  _continueStartLoop . . . . . .	L Near	 0000017B _TEXT	
  _sizeInvalid . . . . . . . . .	L Near	 00000194 _TEXT	
  _notifyInvalid . . . . . . . .	L Near	 0000019B _TEXT	
  _stringIsValid . . . . . . . .	L Near	 000001A7 _TEXT	
  _convertLoop . . . . . . . . .	L Near	 000001B7 _TEXT	
  _potentialSign . . . . . . . .	L Near	 000001B8 _TEXT	
  _isNeg . . . . . . . . . . . .	L Near	 000001C2 _TEXT	
  _isNumber  . . . . . . . . . .	L Near	 000001CB _TEXT	
  _startConvert  . . . . . . . .	L Near	 000001CC _TEXT	
  _continueConvert . . . . . . .	L Near	 000001DA _TEXT	
  _makeNeg . . . . . . . . . . .	L Near	 000001E4 _TEXT	
  _endReadVal  . . . . . . . . .	L Near	 000001EB _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 00000280 _TEXT	Length= 000000A0 Public STDCALL
  string . . . . . . . . . . . .	Byte	 bp - 00000021
  reverseString  . . . . . . . .	Byte	 bp - 00000042
  number . . . . . . . . . . . .	DWord	 bp - 00000048
  byteCounter  . . . . . . . . .	DWord	 bp - 0000004C
  _startNumberConversion . . . .	L Near	 000002A1 _TEXT	
  _negNegative . . . . . . . . .	L Near	 000002B0 _TEXT	
  _isANumberLoop . . . . . . . .	L Near	 000002B2 _TEXT	
  _noMoreLoops . . . . . . . . .	L Near	 000002CE _TEXT	
  _continueIsANumber . . . . . .	L Near	 000002D3 _TEXT	
  _isPositive  . . . . . . . . .	L Near	 000002DF _TEXT	
  _isNegative  . . . . . . . . .	L Near	 000002E7 _TEXT	
  _addNullTerminator . . . . . .	L Near	 000002ED _TEXT	
  _revLoop . . . . . . . . . . .	L Near	 00000301 _TEXT	
  _endOfWriteVal . . . . . . . .	L Near	 00000316 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
calculateAvg . . . . . . . . . .	P Near	 00000327 _TEXT	Length= 00000007 Public STDCALL
calculateSum . . . . . . . . . .	P Near	 00000320 _TEXT	Length= 00000007 Public STDCALL
displayResults . . . . . . . . .	P Near	 0000035E _TEXT	Length= 0000003F Public STDCALL
farewell . . . . . . . . . . . .	P Near	 0000039D _TEXT	Length= 0000000F Public STDCALL
introduction . . . . . . . . . .	P Near	 000000A4 _TEXT	Length= 0000001B Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000A4 Public STDCALL
printArray . . . . . . . . . . .	P Near	 0000032E _TEXT	Length= 00000030 Public STDCALL
  _displayLoop . . . . . . . . .	L Near	 0000033D _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
resetString  . . . . . . . . . .	P Near	 000001F5 _TEXT	Length= 0000001D Public STDCALL
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
testProgram  . . . . . . . . . .	P Near	 000000BF _TEXT	Length= 00000053 Public STDCALL
  _fillLoop  . . . . . . . . . .	L Near	 000000DB _TEXT	
validate . . . . . . . . . . . .	P Near	 00000212 _TEXT	Length= 0000006E Public STDCALL
  index  . . . . . . . . . . . .	DWord	 bp - 00000004
  _validateLoop  . . . . . . . .	L Near	 00000236 _TEXT	
  _checkSign . . . . . . . . . .	L Near	 00000242 _TEXT	
  _checkNumber . . . . . . . . .	L Near	 0000024D _TEXT	
  _continueCheck . . . . . . . .	L Near	 0000024E _TEXT	
  _isValidChar . . . . . . . . .	L Near	 0000025C _TEXT	
  _invalidChar . . . . . . . . .	L Near	 00000264 _TEXT	
  _endOfString . . . . . . . . .	L Near	 00000276 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 0000000Ah   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
COUNT  . . . . . . . . . . . . .	Number	 00000020h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
array  . . . . . . . . . . . . .	DWord	 00000250 _DATA	
author . . . . . . . . . . . . .	Byte	 00000040 _DATA	
avg  . . . . . . . . . . . . . .	DWord	 0000028E _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
bytesRead  . . . . . . . . . . .	DWord	 00000282 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
display_avg  . . . . . . . . . .	Byte	 0000021A _DATA	
display_sum  . . . . . . . . . .	Byte	 000001FA _DATA	
display  . . . . . . . . . . . .	Byte	 000001D2 _DATA	
error  . . . . . . . . . . . . .	Byte	 00000176 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 00000235 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
list_delim . . . . . . . . . . .	Byte	 0000024D _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
numInt . . . . . . . . . . . . .	DWord	 00000286 _DATA	
prog_title . . . . . . . . . . .	Byte	 00000000 _DATA	
prompt_again . . . . . . . . . .	Byte	 000001BF _DATA	
prompt_intro . . . . . . . . . .	Byte	 0000005B _DATA	
prompt . . . . . . . . . . . . .	Byte	 00000156 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sum  . . . . . . . . . . . . . .	DWord	 0000028A _DATA	
userInput  . . . . . . . . . . .	Byte	 00000278 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
