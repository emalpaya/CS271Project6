Microsoft (R) Macro Assembler Version 14.24.28314.0	    03/15/21 21:15:47
<Project 6 - String Primitives and Macros      (Proj6_malpay  Page 1 - 1


				TITLE Project 6 - String Primitives and Macros      (Proj6_malpayae.asm)

				; Author:	Eva Malpaya
				; Last Modified:	3/14/2021
				; OSU email address: malpayae@oregonstate.edu
				; Course number/section:   CS271 Section 401
				; Project Number:	6                Due Date:	3/14/2021
				; Description: This program prompts the user to enter numbers to be
				; entered into an array, validates the input, then displays the array.
				;
				; Note: 'array' and 'list' may be used interchangeably in my comments

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				;--------------------------------------
				; 
				; preconditions:	
				; postconditions:	
				; receives:			prompt, userInput, count, bytesRead
				; returns:			userInput, bytesRead updated
				;--------------------------------------
				mGetString MACRO prompt, userInput, count, bytesRead
					; Display a prompt
					mDisplayString prompt

					; Get user's keyboard input into a memory location
					MOV		EDX, userInput
					MOV		ECX, count
					CALL	ReadString
					MOV		userInput, EDX
					MOV		bytesRead, EAX

				ENDM


				;--------------------------------------
				; 
				; preconditions:	
				; postconditions:	
				; receives:			string (ref)
				; returns:			
				;--------------------------------------
				mDisplayString MACRO string
					PUSH	EDX
					MOV		EDX, string
					CALL	WriteString
					POP		EDX

				ENDM

				; Required constants
 = 0000001F			COUNT =		31		; length of input string can accomodate
				;ARRAYSIZE = 10		; Number of valid integers to get from user
 = 00000001			ARRAYSIZE = 1		; debug only

 00000000			.data
 00000000 50 52 4F 47 52	prog_title			BYTE	"PROGRAMMING ASSIGNMENT 6: Designing low-level I/O procedures ",13,10,0
	   41 4D 4D 49 4E
	   47 20 41 53 53
	   49 47 4E 4D 45
	   4E 54 20 36 3A
	   20 44 65 73 69
	   67 6E 69 6E 67
	   20 6C 6F 77 2D
	   6C 65 76 65 6C
	   20 49 2F 4F 20
	   70 72 6F 63 65
	   64 75 72 65 73
	   20 0D 0A 00
 00000040 57 72 69 74 74	author				BYTE	"Written by: Eva Malpaya ",13,10,0
	   65 6E 20 62 79
	   3A 20 45 76 61
	   20 4D 61 6C 70
	   61 79 61 20 0D
	   0A 00
				;ec_1				BYTE	"**EC: Program aligns the output columns.",13,10,0	; ec = extra credit
 0000005B 0D 0A 50 6C 65	prompt_intro		BYTE	13,10,"Please provide 10 signed decimal integers. ",13,10
	   61 73 65 20 70
	   72 6F 76 69 64
	   65 20 31 30 20
	   73 69 67 6E 65
	   64 20 64 65 63
	   69 6D 61 6C 20
	   69 6E 74 65 67
	   65 72 73 2E 20
	   0D 0A
 0000008A  45 61 63 68 20						BYTE	"Each number needs to be small enough to fit inside a 32 bit register. ",13,10
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 62 65 20 73
	   6D 61 6C 6C 20
	   65 6E 6F 75 67
	   68 20 74 6F 20
	   66 69 74 20 69
	   6E 73 69 64 65
	   20 61 20 33 32
	   20 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 20
	   0D 0A
 000000D2  41 66 74 65 72						BYTE	"After you have finished inputting the raw numbers I will display ",13,10
	   20 79 6F 75 20
	   68 61 76 65 20
	   66 69 6E 69 73
	   68 65 64 20 69
	   6E 70 75 74 74
	   69 6E 67 20 74
	   68 65 20 72 61
	   77 20 6E 75 6D
	   62 65 72 73 20
	   49 20 77 69 6C
	   6C 20 64 69 73
	   70 6C 61 79 20
	   0D 0A
 00000115  61 20 6C 69 73						BYTE	"a list of the integers, their sum, and their average value. ",13,10,13,10,0
	   74 20 6F 66 20
	   74 68 65 20 69
	   6E 74 65 67 65
	   72 73 2C 20 74
	   68 65 69 72 20
	   73 75 6D 2C 20
	   61 6E 64 20 74
	   68 65 69 72 20
	   61 76 65 72 61
	   67 65 20 76 61
	   6C 75 65 2E 20
	   0D 0A 0D 0A 00
 00000156 50 6C 65 61 73	prompt				BYTE	"Please enter a signed number:  ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   20 00
 00000176 45 52 52 4F 52	error				BYTE	"ERROR: You did not enter an signed number or your number was too big. ",13,10,0
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 6E 20 73 69
	   67 6E 65 64 20
	   6E 75 6D 62 65
	   72 20 6F 72 20
	   79 6F 75 72 20
	   6E 75 6D 62 65
	   72 20 77 61 73
	   20 74 6F 6F 20
	   62 69 67 2E 20
	   0D 0A 00
 000001BF 50 6C 65 61 73	prompt_again		BYTE	"Please try again: ",0
	   65 20 74 72 79
	   20 61 67 61 69
	   6E 3A 20 00
 000001D2 0D 0A 59 6F 75	display				BYTE	13,10,"You entered the following numbers: ",13,10,0
	   20 65 6E 74 65
	   72 65 64 20 74
	   68 65 20 66 6F
	   6C 6C 6F 77 69
	   6E 67 20 6E 75
	   6D 62 65 72 73
	   3A 20 0D 0A 00
 000001FA 54 68 65 20 73	display_sum			BYTE	"The sum of these numbers is: ",13,10,0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 0D
	   0A 00
 0000021A 54 68 65 20 72	display_avg			BYTE	"The rounded average is: ",13,10,0
	   6F 75 6E 64 65
	   64 20 61 76 65
	   72 61 67 65 20
	   69 73 3A 20 0D
	   0A 00
 00000235 0D 0A 54 68 61	goodbye				BYTE	13,10,"Thanks for playing!  ",0
	   6E 6B 73 20 66
	   6F 72 20 70 6C
	   61 79 69 6E 67
	   21 20 20 00
 0000024D 2C 20 00		list_delim			BYTE	", ",0
 00000250  00000001 [		array				SDWORD	ARRAYSIZE DUP(?)
	    00000000
	   ]
 00000254 00			userInput			BYTE	?
 00000255 00000000		bytesRead			DWORD	0
 00000259 00000000		numInt				SDWORD	0	; the string converted to a number
 0000025D 00000000		sum					SDWORD	0
 00000261 00000000		avg					SDWORD	0

 00000000			.code
 00000000			main PROC
					; Introduce the program
 00000000  68 00000000 R		PUSH	OFFSET prog_title
 00000005  68 00000040 R		PUSH	OFFSET author
 0000000A  E8 00000095			CALL	introduction

					; Get 10 valid integers from the user
 0000000F  8D 3D 00000259 R		LEA		EDI, numInt	
 00000015  57				PUSH	EDI					;44
 00000016  68 00000176 R		PUSH	OFFSET error		;40
 0000001B  68 00000250 R		PUSH	OFFSET array		;36
 00000020  68 00000254 R		PUSH	OFFSET userInput	;32
 00000025  FF 35 00000255 R		PUSH	bytesRead			;28
 0000002B  6A 1F			PUSH	COUNT				;24
 0000002D  6A 01			PUSH	ARRAYSIZE			;20
 0000002F  68 0000005B R		PUSH	OFFSET prompt_intro	;16
 00000034  68 00000156 R		PUSH	OFFSET prompt		;12
 00000039  68 000001BF R		PUSH	OFFSET prompt_again	;8
 0000003E  E8 0000007C			CALL	testProgram


					; Store these numeric values in an array


					; Calculate the sum
 00000043  FF 35 0000025D R		PUSH	sum					;16
 00000049  68 00000250 R		PUSH	OFFSET array		;12
 0000004E  6A 01			PUSH	ARRAYSIZE			;8
 00000050  E8 0000024B			CALL	calculateSum


					; Calculate the average
 00000055  FF 35 00000261 R		PUSH	avg					;16
 0000005B  68 00000250 R		PUSH	OFFSET array		;12
 00000060  6A 01			PUSH	ARRAYSIZE			;8
 00000062  E8 00000240			CALL	calculateAvg
					


					; Display the integers, their sum, and their average
					;mDisplayString display
 00000067  68 0000024D R		PUSH	OFFSET list_delim	;36
 0000006C  68 000001D2 R		PUSH	OFFSET display		;32
 00000071  68 000001FA R		PUSH	OFFSET display_sum	;28
 00000076  68 0000021A R		PUSH	OFFSET display_avg	;24
 0000007B  68 00000250 R		PUSH	OFFSET array		;20
 00000080  6A 01			PUSH	ARRAYSIZE			;16
 00000082  FF 35 0000025D R		PUSH	sum					;12	
 00000088  FF 35 00000261 R		PUSH	avg					;8
 0000008E  E8 0000023F			CALL	displayResults


					; Say goodbye
 00000093  68 00000235 R		PUSH	OFFSET goodbye
 00000098  E8 00000268			CALL	farewell

					Invoke ExitProcess,0	; exit to operating system
 0000009D  6A 00	   *	    push   +000000000h
 0000009F  E8 00000000 E   *	    call   ExitProcess
 000000A4			main ENDP

				;--------------------------------------
				; Introduces the program title and programmer's name, introduces
				; the program itself, and displays the extra credit print statements 
				; (if necessary).
				; preconditions:	intro1, intro2 are strings
				; postconditions:	
				; receives:			intro1, intro2
				; returns:			none
				;--------------------------------------
 000000A4			introduction PROC
 000000A4  55				PUSH	EBP
 000000A5  8B EC			MOV		EBP, ESP
					; preserve registers	

					; Introduce the program title
					mDisplayString [EBP+12]
 000000A7  52		     1		PUSH	EDX
 000000A8  8B 55 0C	     1		MOV		EDX, [EBP+12]
 000000AB  E8 00000000 E     1		CALL	WriteString
 000000B0  5A		     1		POP		EDX

					; Introduce the programmer's name
					mDisplayString [EBP+8]
 000000B1  52		     1		PUSH	EDX
 000000B2  8B 55 08	     1		MOV		EDX, [EBP+8]
 000000B5  E8 00000000 E     1		CALL	WriteString
 000000BA  5A		     1		POP		EDX

					; Display the extra credit print statements 

					; restore registers
 000000BB  5D				POP		EBP
 000000BC  C2 0008			RET		8
 000000BF			introduction ENDP

				;--------------------------------------
				; 
				; (if necessary).
				; preconditions:	
				; postconditions:	
				; receives:			
				; returns:			
				;--------------------------------------
 000000BF			testProgram PROC
 000000BF  55				PUSH	EBP
 000000C0  8B EC			MOV		EBP, ESP
					; preserve registers	
 000000C2  51				PUSH	ECX

 000000C3  8B 4D 14			MOV		ECX, [EBP+20]	; array length into ECX
 000000C6  8B 7D 24			MOV		EDI, [EBP+36]	; Address of array into EDI

					; Display the prompt intro
					mDisplayString [EBP+16]	;prompt_intro
 000000C9  52		     1		PUSH	EDX
 000000CA  8B 55 10	     1		MOV		EDX, [EBP+16]
 000000CD  E8 00000000 E     1		CALL	WriteString
 000000D2  5A		     1		POP		EDX

					; Get 10 valid integers from the user.
 000000D3  8B 4D 14			MOV		ECX, [EBP+20]	;ARRAYSIZE
 000000D6			_fillLoop:
 000000D6  51				PUSH	ECX

 000000D7  FF 75 2C			PUSH	[EBP+44]		;32	;numInt
 000000DA  FF 75 08			PUSH	[EBP+8]			;28	;prompt_again
 000000DD  FF 75 28			PUSH	[EBP+40]		;24	;error
 000000E0  FF 75 0C			PUSH	[EBP+12]		;20	;prompt
 000000E3  FF 75 18			PUSH	[EBP+24]		;16	;COUNT
 000000E6  FF 75 20			PUSH	[EBP+32]		;12	;userInput
 000000E9  FF 75 1C			PUSH	[EBP+28]		;8	;bytesRead
 000000EC  E8 00000015			CALL	ReadVal

					; debug only
					;MOV		EDI, [EBP+32]
					;MOV		EAX, [EDI]
					;CALL	WriteDec
					;CALL	CrLf

 000000F1  59				POP		ECX

					; move the validated value into the array
 000000F2  8B 7D 24			MOV		EDI, [EBP+36]	; Address of array into EDI
 000000F5  8B 75 20			MOV		ESI, [EBP+32]
 000000F8  8B 06			MOV		EAX, [ESI]
 000000FA  89 07			MOV		[EDI], EAX
 000000FC  83 C7 04			ADD		EDI, 4

 000000FF  E2 D5			LOOP	_fillLoop
					

					; restore registers
 00000101  59				POP		ECX
 00000102  5D				POP		EBP
 00000103  C2 0028			RET		40
 00000106			testProgram ENDP

				;--------------------------------------
				; 
				; (if necessary).
				; preconditions:	
				; postconditions:	
				; receives:			
				; returns:			
				;--------------------------------------
 00000106			ReadVal PROC
					; Create local variables
					LOCAL	isValid:	DWORD	; bool for character validation

					; Handled by LOCAL dir
					;PUSH	EBP
					;MOV		EBP, ESP
					
					; preserve registers	
 00000106  55		   *	    push   ebp
 00000107  8B EC	   *	    mov    ebp, esp
 00000109  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 0000010C  50				PUSH	EAX		
 0000010D  53				PUSH	EBX		
 0000010E  51				PUSH	ECX
 0000010F  52				PUSH	EDX

					; initialize local variables
 00000110  C7 45 FC			MOV		isValid, 1
	   00000001

 00000117			_startLoop:
					; Invoke myGetString macro to get user input in form of string of digits
					;prompt, userInput, count, bytesRead

 00000117  8B 45 FC			MOV		EAX, isValid
 0000011A  83 F8 00			CMP		EAX, 0
 0000011D  74 02			JE		_getStringAgain
 0000011F  EB 1D			JMP		_getString

 00000121			_getStringAgain:
					mGetString [EBP+28], [EBP+12], [EBP+16], [EBP+8]
 00000121  52		     2		PUSH	EDX
 00000122  8B 55 1C	     2		MOV		EDX, [EBP+28]
 00000125  E8 00000000 E     2		CALL	WriteString
 0000012A  5A		     2		POP		EDX
 0000012B  8B 55 0C	     1		MOV		EDX, [EBP+12]
 0000012E  8B 4D 10	     1		MOV		ECX, [EBP+16]
 00000131  E8 00000000 E     1		CALL	ReadString
 00000136  89 55 0C	     1		MOV		[EBP+12], EDX
 00000139  89 45 08	     1		MOV		[EBP+8], EAX
 0000013C  EB 23			JMP		_continueStartLoop
 0000013E			_getString:
					mGetString [EBP+20], [EBP+12], [EBP+16], [EBP+8]
 0000013E  52		     2		PUSH	EDX
 0000013F  8B 55 14	     2		MOV		EDX, [EBP+20]
 00000142  E8 00000000 E     2		CALL	WriteString
 00000147  5A		     2		POP		EDX
 00000148  8B 55 0C	     1		MOV		EDX, [EBP+12]
 0000014B  8B 4D 10	     1		MOV		ECX, [EBP+16]
 0000014E  E8 00000000 E     1		CALL	ReadString
 00000153  89 55 0C	     1		MOV		[EBP+12], EDX
 00000156  89 45 08	     1		MOV		[EBP+8], EAX

					; if string is too large, automatically set as invalid
 00000159  8B 45 08			MOV		EAX, [EBP+8]
 0000015C  83 F8 04			CMP		EAX, 4
 0000015F  7F 19			JG		_sizeInvalid

 00000161			_continueStartLoop:
					;PUSH	[isValid]				;16	
 00000161  8D 7D FC			LEA		EDI, isValid
 00000164  57				PUSH	EDI						;16
 00000165  FF 75 08			PUSH	[EBP+8]					;12	;bytesRead
 00000168  FF 75 0C			PUSH	[EBP+12]				;8	;userInput
 0000016B  E8 0000005C			CALL	validate

					; if input is invalid, display error message
 00000170  8B 45 FC			MOV		EAX, isValid
 00000173  83 F8 00			CMP		EAX, 0
 00000176  74 09			JE		_notifyInvalid

					; if this point is reached, string is valid
 00000178  EB 13			JMP		_stringIsValid

 0000017A			_sizeInvalid:
 0000017A  C7 45 FC			MOV		isValid, 0
	   00000000
 00000181			_notifyInvalid:
					mDisplayString [EBP+24]			;error
 00000181  52		     1		PUSH	EDX
 00000182  8B 55 18	     1		MOV		EDX, [EBP+24]
 00000185  E8 00000000 E     1		CALL	WriteString
 0000018A  5A		     1		POP		EDX
					;MOV		isValid, 1				;reset checker
 0000018B  EB 8A			JMP		_startLoop

 0000018D			_stringIsValid:

				; convert to SDWORD
 0000018D  8B 4D 08			MOV		ECX, [EBP+8]	; String length into ECX
					;INC		ECX				; Account for null-terminator
 00000190  8B 75 0C			MOV		ESI, [EBP+12]	; Address of string into ESI

 00000193  8B 7D 20			MOV		EDI, [EBP+32]	; numInt
					;MOV		EAX, 1
					;MOV		[EDI], EAX
					
 00000196			_convertLoop:				; For numChar in numString
 00000196  AC				LODSB	; Puts byte in AL

					; check if signed
 00000197  50				PUSH	EAX				; preserve AL before first char check

 00000198  8B C1			MOV		EAX, ECX
 0000019A  83 F8 00			CMP		EAX, 0
 0000019D  74 02			JE		_potentialSign
 0000019F  EB 0B			JMP		_isNumber


					; check first character if it's not a number
 000001A1			_potentialSign:
 000001A1  58				POP		EAX				; restore AL before first char check

					; check if plus sign
 000001A2  3C 2B			CMP		AL, 43			;+
 000001A4  74 15			JE		_continueConvert

					; check if negative sign
 000001A6  3C 2D			CMP		AL, 45			;-
 000001A8  74 11			JE		_continueConvert
 000001AA  EB 01			JMP		_startConvert

					; check if characters are numbers
 000001AC			_isNumber:
 000001AC  58				POP		EAX				; restore AL before first char check

					; confirmed not trying to convert a sign character at this point
 000001AD			_startConvert:
					; do something with AL
 000001AD  2C 30			SUB		AL, 48
 000001AF  0F BE D8			MOVSX	EBX, AL

 000001B2  8B 07			MOV		EAX, [EDI]		; move numInt into EAX
 000001B4  6B C0 0A			IMUL	EAX, 10			; multiply numInt by 10

 000001B7  03 C3			ADD		EAX, EBX		; Add these two together to update numInt
 000001B9  89 07			MOV		[EDI], EAX		; store resulting integer in numInt
 000001BB			_continueConvert:
 000001BB  E2 D9			LOOP	_convertLoop	; repeat for length of string

 000001BD  8B 07			MOV		EAX, [EDI]		; store it into userInput
 000001BF  8B 75 0C			MOV		ESI, [EBP+12]
 000001C2  89 06			MOV		[ESI], EAX
					


					; restore registers
 000001C4  5A				POP		EDX
 000001C5  59				POP		ECX
 000001C6  5B				POP		EBX
 000001C7  58				POP		EAX
					;POP		EBP					; Handled by LOCAL dir
 000001C8  C9		   *	    leave  
 000001C9  C2 001C			RET		28
 000001CC			ReadVal ENDP


				;--------------------------------------
				; 
				; (if necessary).
				; preconditions:	
				; postconditions:	
				; receives:			
				; returns:			
				;--------------------------------------
 000001CC			validate PROC
					; Create local variables
					LOCAL	index:	DWORD	; placeholder in string

					; Handled by LOCAL dir
					;PUSH	EBP
					;MOV		EBP, ESP

					; preserve registers
 000001CC  55		   *	    push   ebp
 000001CD  8B EC	   *	    mov    ebp, esp
 000001CF  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 000001D2  50				PUSH	EAX		
 000001D3  53				PUSH	EBX		
 000001D4  51				PUSH	ECX
 000001D5  52				PUSH	EDX
 000001D6  56				PUSH	ESI
 000001D7  57				PUSH	EDI

					; initialize local variables
 000001D8  C7 45 FC			MOV		index, 0
	   00000000

 000001DF  8B 4D 0C			MOV		ECX, [EBP+12]	; String length into ECX
 000001E2  41				INC		ECX				; Account for null-terminator
 000001E3  8B 75 08			MOV		ESI, [EBP+8]	; Address of string into ESI

 000001E6  8B 7D 10			MOV		EDI, [EBP+16]	; Reset bool value
 000001E9  B8 00000001			MOV		EAX, 1
 000001EE  89 07			MOV		[EDI], EAX


 000001F0			_validateLoop:	
 000001F0  AC				LODSB	; Puts byte in AL

					; check if signed
 000001F1  50				PUSH	EAX				; preserve AL before first char check

 000001F2  8B 45 FC			MOV		EAX, index
 000001F5  83 F8 00			CMP		EAX, 0
 000001F8  74 02			JE		_checkSign
 000001FA  EB 0B			JMP		_checkNumber


					; check first character if it's not a number
 000001FC			_checkSign:
 000001FC  58				POP		EAX				; restore AL before first char check

					; check if plus sign
 000001FD  3C 2B			CMP		AL, 43			;+
 000001FF  74 15			JE		_isValidChar

					; check if negative sign
 00000201  3C 2D			CMP		AL, 45			;-
 00000203  74 11			JE		_isValidChar
 00000205  EB 01			JMP		_continueCheck

					; check if characters are numbers
 00000207			_checkNumber:
 00000207  58				POP		EAX				; restore AL before first char check

 00000208			_continueCheck:
					; check if end of string
 00000208  3C 00			CMP		AL, 0
 0000020A  74 24			JE		_endOfString

 0000020C  3C 30			CMP		AL, 48			;0
 0000020E  7C 0E			JL		_invalidChar
 00000210  3C 39			CMP		AL, 57			;9
 00000212  7F 0A			JG		_invalidChar
 00000214  EB 00			JMP		_isValidChar

 00000216			_isValidChar:
 00000216  FF 45 FC			INC		index
 00000219  AA				STOSB
 0000021A  E2 D4			LOOP	_validateLoop
 0000021C  EB 12			JMP		_endOfString

 0000021E			_invalidChar:
 0000021E  8B 7D 10			MOV		EDI, [EBP+16]
 00000221  B8 00000000			MOV		EAX, 0
 00000226  89 07			MOV		[EDI], EAX

 00000228  8B 55 10			MOV		EDX, [EBP+16]
 0000022B  E8 00000000 E		CALL	WriteDec

					;LEA		EAX, [EBP+16]
					;MOV		EAX, 0

					;MOV		EAX, [EBP+16]
					;MOV		EAX, [EDI]
					;CALL	WriteDec

 00000230			_endOfString:
					; restore registers
 00000230  5F				POP		EDI
 00000231  5E				POP		ESI
 00000232  5A				POP		EDX
 00000233  59				POP		ECX
 00000234  5B				POP		EBX		
 00000235  58				POP		EAX
					;POP		EBP			; Handled by LOCAL dir
 00000236  C9		   *	    leave  
 00000237  C2 000C			RET		12
 0000023A			validate ENDP


				;--------------------------------------
				; 
				;
				; preconditions:	
				; postconditions:	userInput (val)
				; receives:			
				; returns:			
				;--------------------------------------
 0000023A			WriteVal PROC
					; Create local variables
					LOCAL	string:	BYTE	; placeholder in string
					LOCAL	number: DWORD	; placeholder for number

					; Handled by LOCAL dir
					;PUSH	EBP
					;MOV		EBP, ESP

					; preserve registers
 0000023A  55		   *	    push   ebp
 0000023B  8B EC	   *	    mov    ebp, esp
 0000023D  83 C4 F8	   *	    add    esp, 0FFFFFFF8h
 00000240  50				PUSH	EAX		
 00000241  53				PUSH	EBX		
 00000242  51				PUSH	ECX
 00000243  52				PUSH	EDX
 00000244  56				PUSH	ESI
 00000245  57				PUSH	EDI

					; Convert numeric SDWORD value to string of ascii digits
 00000246  8B 45 08			MOV		EAX, [EBP+8]
 00000249  89 45 F8			MOV		number, EAX

					; Prep local variable to hold the converted string
					;MOV		EAX, OFFSET string
					;MOV		EDI, EAX
					;XOR		EDI, EDI
 0000024C  8D 7D FF			LEA			EDI, string


 0000024F			_startNumberConversion:
 0000024F  B9 00000063			MOV		ECX, 99
 00000254  8B 45 F8			MOV		EAX, number		; divide by 10

					; not sign character at this point
 00000257			_isANumberLoop:
 00000257  BB 0000000A			MOV		EBX, 10
 0000025C  99				CDQ
 0000025D  F7 FB			IDIV	EBX

 0000025F  50				PUSH	EAX				; save quotient for next character

 00000260  8B C2			MOV		EAX, EDX
 00000262  83 C0 30			ADD		EAX, 48			; add 48 
					;MOV		AL, AX		; add to string
 00000265  AA				STOSB					
					;LEA		EDX, string			; debug only
					;CALL	WriteString			; debug only
 00000266  58				POP		EAX				; restore quotient

 00000267  83 F8 00			CMP		EAX, 0
 0000026A  74 02			JE		_noMoreLoops
 0000026C  EB 05			JMP		_continueIsANumber

 0000026E			_noMoreLoops:
 0000026E  B9 00000001			MOV		ECX, 1

 00000273			_continueIsANumber:
 00000273  E2 E2			LOOP	_isANumberLoop


					; check sign
 00000275  8B 45 F8			MOV		EAX, number
 00000278  83 F8 00			CMP		EAX, 0
 0000027B  7D 02			JGE		_isPositive
 0000027D  EB 05			JMP		_isNegative

 0000027F			_isPositive:
 0000027F  B0 2B			MOV		AL, 43			;+
 00000281  AA				STOSB
					;LEA		EDX, string			; debug only
					;CALL	WriteString			; debug only
 00000282  EB 03			JMP		_addNullTerminator

 00000284			_isNegative:
 00000284  B0 2D			MOV		AL, 45			;-
					;LEA		EDX, string			; debug only
					;CALL	WriteString			; debug only
 00000286  AA				STOSB

 00000287			_addNullTerminator:
					; add null-terminator
 00000287  B0 00			MOV		AL, 0
 00000289  AA				STOSB

					; reverse the string

					; print the ascii representation
 0000028A  8D 55 FF			LEA		EDX, string			; debug only
					;CALL	WriteString			; debug only
					mDisplayString EDX
 0000028D  52		     1		PUSH	EDX
 0000028E  8B D2	     1		MOV		EDX, EDX
 00000290  E8 00000000 E     1		CALL	WriteString
 00000295  5A		     1		POP		EDX


 00000296			_endOfWriteVal:
					; restore registers
 00000296  5F				POP		EDI
 00000297  5E				POP		ESI
 00000298  5A				POP		EDX
 00000299  59				POP		ECX
 0000029A  5B				POP		EBX		
 0000029B  58				POP		EAX
					;POP		EBP			; Handled by LOCAL dir
 0000029C  C9		   *	    leave  
 0000029D  C2 0004	RET		4
 000002A0			WriteVal ENDP

				;--------------------------------------
				; 
				; (if necessary).
				; preconditions:	
				; postconditions:	
				; receives:			
				; returns:			
				;--------------------------------------
 000002A0			calculateSum PROC
 000002A0  55				PUSH	EBP
 000002A1  8B EC			MOV		EBP, ESP
					; preserve registers	


					; restore registers
 000002A3  5D				POP		EBP
 000002A4  C2 000C			RET		12
 000002A7			calculateSum ENDP

				;--------------------------------------
				; 
				; (if necessary).
				; preconditions:	
				; postconditions:	
				; receives:			
				; returns:			
				;--------------------------------------
 000002A7			calculateAvg PROC
 000002A7  55				PUSH	EBP
 000002A8  8B EC			MOV		EBP, ESP
					; preserve registers	


					; restore registers
 000002AA  5D				POP		EBP
 000002AB  C2 000C			RET		12
 000002AE			calculateAvg ENDP

				;--------------------------------------
				; Traverses an array and prints out its values with a space
				; in-between each number.
				;
				; preconditions:	someArray is a DWORD array the size of ARRAYSIZE,
				;					ARRAYSIZE is the size of the array,
				;					someTitle contains a string
				; postconditions:	EAX, EBX, ECX, EDX changed but restored
				; receives:			someTitle, someArray, ARRAYSIZE 
				; returns:			none; output to terminal only
				;--------------------------------------
 000002AE			printArray PROC
 000002AE  55				PUSH	EBP
 000002AF  8B EC			MOV		EBP, ESP

					; preserve registers
 000002B1  50				PUSH	EAX
 000002B2  53				PUSH	EBX
 000002B3  51				PUSH	ECX
 000002B4  52				PUSH	EDX		
 000002B5  57				PUSH	EDI

					; Access the list
 000002B6  8B 4D 08			MOV		ECX, [EBP+8]	; List length into ECX
 000002B9  8B 75 0C			MOV		ESI, [EBP+12]	; Address of list into EDI

					; traverse the list and print each number
					; with a space in-between. Prints new line
					; every 20 numbers
 000002BC			_displayLoop:
 000002BC  8B 06			MOV		EAX, [ESI]		; Print out a number in the list
 000002BE  50				PUSH	EAX				;8
 000002BF  E8 FFFFFF76			CALL	WriteVal

					;MOV		AL, 44
					;STOSB
					;LEA		EDI, EAX
					;mDisplayString [EBP+16]		; print out a comma ;44
					;MOV		AL, 32
					;LEA		EDI, EAX
					;mDisplayString EDI		; print out a space ;32

 000002C4  83 C7 04			ADD		EDI, 4			; Move to the next element in list
 000002C7  E2 F3			LOOP	_displayLoop

					; restore registers
 000002C9  5F				POP		EDI
 000002CA  5A				POP		EDX		
 000002CB  59				POP		ECX
 000002CC  5B				POP		EBX
 000002CD  58				POP		EAX
 000002CE  5D				POP		EBP			
 000002CF  C2 000C			RET		12
 000002D2			printArray ENDP


				;--------------------------------------
				; 
				; (if necessary).
				; preconditions:	
				; postconditions:	
				; receives:			
				; returns:			
				;--------------------------------------
 000002D2			displayResults PROC
 000002D2  55				PUSH	EBP
 000002D3  8B EC			MOV		EBP, ESP
					; preserve registers	

					; Display the integers
					mDisplayString [EBP+32]
 000002D5  52		     1		PUSH	EDX
 000002D6  8B 55 20	     1		MOV		EDX, [EBP+32]
 000002D9  E8 00000000 E     1		CALL	WriteString
 000002DE  5A		     1		POP		EDX
 000002DF  FF 75 24			PUSH	[EBP+36]	;16	;list_delim
 000002E2  FF 75 14			PUSH	[EBP+20]	;12	;array
 000002E5  FF 75 10			PUSH	[EBP+16]	;8	;ARRAYSIZE
 000002E8  E8 FFFFFFC1			CALL	printArray


					; Display the sum
					mDisplayString [EBP+28]
 000002ED  52		     1		PUSH	EDX
 000002EE  8B 55 1C	     1		MOV		EDX, [EBP+28]
 000002F1  E8 00000000 E     1		CALL	WriteString
 000002F6  5A		     1		POP		EDX

					; Display the average
					mDisplayString [EBP+24]
 000002F7  52		     1		PUSH	EDX
 000002F8  8B 55 18	     1		MOV		EDX, [EBP+24]
 000002FB  E8 00000000 E     1		CALL	WriteString
 00000300  5A		     1		POP		EDX

					; restore registers
 00000301  5D				POP		EBP
 00000302  C2 0020			RET		32
 00000305			displayResults ENDP

				;--------------------------------------
				; Displays a parting message
				;
				; preconditions:	goodbye is a string that contains a farewell message
				; postconditions:	EDX changed changed but restored
				; receives:			goodbye
				; returns:			none; prints to terminal only
				;--------------------------------------
 00000305			farewell PROC
 00000305  55				PUSH	EBP
 00000306  8B EC			MOV		EBP, ESP
					; preserve registers
 00000308  52				PUSH	EDX

 00000309  8B 55 08			MOV		EDX, [EBP+8]
 0000030C  E8 00000000 E		CALL	WriteString

					; restore registers
 00000311  5A				POP		EDX
 00000312  5D				POP		EBP
 00000313  C3				RET
 00000314			farewell ENDP


				END main
Microsoft (R) Macro Assembler Version 14.24.28314.0	    03/15/21 21:15:47
<Project 6 - String Primitives and Macros      (Proj6_malpay  Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000265 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000314 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000106 _TEXT	Length= 000000C6 Public STDCALL
  isValid  . . . . . . . . . . .	DWord	 bp - 00000004
  _startLoop . . . . . . . . . .	L Near	 00000117 _TEXT	
  _getStringAgain  . . . . . . .	L Near	 00000121 _TEXT	
  _getString . . . . . . . . . .	L Near	 0000013E _TEXT	
  _continueStartLoop . . . . . .	L Near	 00000161 _TEXT	
  _sizeInvalid . . . . . . . . .	L Near	 0000017A _TEXT	
  _notifyInvalid . . . . . . . .	L Near	 00000181 _TEXT	
  _stringIsValid . . . . . . . .	L Near	 0000018D _TEXT	
  _convertLoop . . . . . . . . .	L Near	 00000196 _TEXT	
  _potentialSign . . . . . . . .	L Near	 000001A1 _TEXT	
  _isNumber  . . . . . . . . . .	L Near	 000001AC _TEXT	
  _startConvert  . . . . . . . .	L Near	 000001AD _TEXT	
  _continueConvert . . . . . . .	L Near	 000001BB _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 0000023A _TEXT	Length= 00000066 Public STDCALL
  string . . . . . . . . . . . .	Byte	 bp - 00000001
  number . . . . . . . . . . . .	DWord	 bp - 00000008
  _startNumberConversion . . . .	L Near	 0000024F _TEXT	
  _isANumberLoop . . . . . . . .	L Near	 00000257 _TEXT	
  _noMoreLoops . . . . . . . . .	L Near	 0000026E _TEXT	
  _continueIsANumber . . . . . .	L Near	 00000273 _TEXT	
  _isPositive  . . . . . . . . .	L Near	 0000027F _TEXT	
  _isNegative  . . . . . . . . .	L Near	 00000284 _TEXT	
  _addNullTerminator . . . . . .	L Near	 00000287 _TEXT	
  _endOfWriteVal . . . . . . . .	L Near	 00000296 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
calculateAvg . . . . . . . . . .	P Near	 000002A7 _TEXT	Length= 00000007 Public STDCALL
calculateSum . . . . . . . . . .	P Near	 000002A0 _TEXT	Length= 00000007 Public STDCALL
displayResults . . . . . . . . .	P Near	 000002D2 _TEXT	Length= 00000033 Public STDCALL
farewell . . . . . . . . . . . .	P Near	 00000305 _TEXT	Length= 0000000F Public STDCALL
introduction . . . . . . . . . .	P Near	 000000A4 _TEXT	Length= 0000001B Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000A4 Public STDCALL
printArray . . . . . . . . . . .	P Near	 000002AE _TEXT	Length= 00000024 Public STDCALL
  _displayLoop . . . . . . . . .	L Near	 000002BC _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
testProgram  . . . . . . . . . .	P Near	 000000BF _TEXT	Length= 00000047 Public STDCALL
  _fillLoop  . . . . . . . . . .	L Near	 000000D6 _TEXT	
validate . . . . . . . . . . . .	P Near	 000001CC _TEXT	Length= 0000006E Public STDCALL
  index  . . . . . . . . . . . .	DWord	 bp - 00000004
  _validateLoop  . . . . . . . .	L Near	 000001F0 _TEXT	
  _checkSign . . . . . . . . . .	L Near	 000001FC _TEXT	
  _checkNumber . . . . . . . . .	L Near	 00000207 _TEXT	
  _continueCheck . . . . . . . .	L Near	 00000208 _TEXT	
  _isValidChar . . . . . . . . .	L Near	 00000216 _TEXT	
  _invalidChar . . . . . . . . .	L Near	 0000021E _TEXT	
  _endOfString . . . . . . . . .	L Near	 00000230 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 00000001h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
COUNT  . . . . . . . . . . . . .	Number	 0000001Fh   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
array  . . . . . . . . . . . . .	DWord	 00000250 _DATA	
author . . . . . . . . . . . . .	Byte	 00000040 _DATA	
avg  . . . . . . . . . . . . . .	DWord	 00000261 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
bytesRead  . . . . . . . . . . .	DWord	 00000255 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
display_avg  . . . . . . . . . .	Byte	 0000021A _DATA	
display_sum  . . . . . . . . . .	Byte	 000001FA _DATA	
display  . . . . . . . . . . . .	Byte	 000001D2 _DATA	
error  . . . . . . . . . . . . .	Byte	 00000176 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 00000235 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
list_delim . . . . . . . . . . .	Byte	 0000024D _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
numInt . . . . . . . . . . . . .	DWord	 00000259 _DATA	
prog_title . . . . . . . . . . .	Byte	 00000000 _DATA	
prompt_again . . . . . . . . . .	Byte	 000001BF _DATA	
prompt_intro . . . . . . . . . .	Byte	 0000005B _DATA	
prompt . . . . . . . . . . . . .	Byte	 00000156 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sum  . . . . . . . . . . . . . .	DWord	 0000025D _DATA	
userInput  . . . . . . . . . . .	Byte	 00000254 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
